{"version":3,"sources":["../node_modules/alertifyjs/build/alertify.js"],"names":["window","NOT_DISABLED_NOT_RESET","keys","defaults","autoReset","basic","closable","closableByDimmer","invokeOnCloseOff","frameless","defaultFocusOff","maintainFocus","maximizable","modal","movable","moveBounded","overflow","padding","pinnable","pinned","preventBodyShift","resizable","startMaximized","transition","transitionOff","tabbable","join","notifier","delay","position","closeButton","classes","base","prefix","message","top","right","bottom","left","center","visible","hidden","close","glossary","title","ok","cancel","acccpt","deny","confirm","decline","maximize","restore","theme","input","hooks","preinit","postinit","openDialogs","addClass","element","classNames","className","removeClass","original","split","toBeRemoved","x","length","index","indexOf","splice","isRightToLeft","getComputedStyle","document","body","direction","getScrollTop","documentElement","scrollTop","getScrollLeft","scrollLeft","clearContents","lastChild","removeChild","isString","thing","Object","prototype","toString","call","copy","src","cpy","Array","isArray","push","Date","getTime","RegExp","source","global","ignoreCase","multiline","lastIndex","prop","hasOwnProperty","destruct","instance","initialize","elements","root","parentNode","settings","__settings","__init","__internal","IsPassiveSupported","options","defineProperty","get","addEventListener","removeEventListener","e","on","el","event","fn","useCapture","passive","capture","off","t","type","supported","transitions","undefined","style","delegate","context","method","arguments","args","apply","createCloseEvent","button","dispatchEvent","eventType","dialog","scrollX","scrollY","usedKeys","tabindex","isSafari","navigator","userAgent","templates","primary","auxiliary","setup","alertify","focus","buttons","select","buttonsDefinition","b","ref","i","internal","isOpen","activeElement","timerIn","timerOut","onshow","onclosing","onclose","onfocus","onmove","onmoved","onresize","onresized","onmaximize","onmaximized","onrestore","onrestored","resetHandler","beginMoveHandler","beginResizeHandler","bringToFrontHandler","modalClickHandler","buttonsClickHandler","commandsClickHandler","transitionInHandler","transitionOutHandler","destroy","createElement","display","innerHTML","dimmer","firstChild","reset","commands","container","nextSibling","pin","header","content","footer","resizeHandle","buttonTemplate","key","cloneNode","text","attrs","setAttribute","scope","appendChild","opKey","onReset","beginMove","beginResize","bringToFront","handleTransitionInEvent","handleTransitionOutEvent","set","build","restoreScrollPosition","scrollTo","ensureNoOverflow","requiresNoOverflow","isModal","isMaximized","topScroll","add","scrollHeight","clientHeight","setFocus","optionUpdated","option","oldValue","newValue","setHeader","unbindModelessEvents","updateAbsPositionFix","bindModelessEvents","updateDisplayMode","updateBasicMode","updateFramelessMode","removeAbsPositionFix","addAbsPositionFix","updatePinned","bindClosableEvents","unbindClosableEvents","updateClosable","updateMaximizable","updatePinnable","bindMovableEvents","resetMove","unbindMovableEvents","updateMovable","bindResizableEvents","resetResize","unbindResizableEvents","updateResizable","value","offsetWidth","updateTransition","updateTransitionOff","onupdate","update","obj","callback","old","result","op","items","found","Error","triggerClose","triggerCallback","invokeOnClose","srcElement","target","isPinned","unpin","marginTop","marginLeft","marginRight","parseInt","cancelClick","modalClickHandlerTS","timeStamp","callbackTS","cancelKeyup","check","now","idx","disabled","closeEvent","contains","keyupHandler","keyCode","keydownHandler","preventDefault","stopPropagation","resetTarget","querySelector","firstReset","lastReset","lastFocusedElement","relatedTarget","within","findTabbable","last","tabbables","slice","querySelectorAll","reverse","offsetParent","offsetHeight","getClientRects","recycleTab","shiftKey","clearTimeout","offsetX","offsetY","xProp","yProp","bounds","refreshTop","moveDelegate","moveElement","moveElementBounded","Math","min","maxLeft","max","minLeft","maxTop","minTop","eventSrc","targetTouches","current","offsetLeft","offsetTop","move","endMove","startingLeft","Number","Nan","startingWidth","minWidth","handleOffset","height","minHeight","width","maxWidth","resize","pageRelative","X","Y","pageX","pageY","clientX","clientY","isRTL","isNaN","diff","abs","resizeElement","endResize","windowResize","this","moveTo","y","resizeTo","w","parseFloat","h","regex","match","clientWidth","setting","self","k","o","n","settingUpdated","item","HTMLElement","setContent","showModal","show","setTimeout","hasAttribute","prepare","removeAttribute","closeOthers","closeAll","openInstances","baseClass","updatePosition","create","div","clickDelegate","getAttribute","dismiss","transitionDone","clearTimers","timer","transitionTimeout","_content","_wait","pushed","wait","insertBefore","clickHandler","ondismiss","clicked","transitionEndHandler","dismissOthers","dismissAll","except","clone","dialogs","extend","sub","get_dialog","name","Factory","transient","definition","factory","register","notify","success","error","warning","main","_title","_message","_onok","onok","setMessage","label","returnValue","autoConfirm","duration","task","clearAutoConfirm","clearInterval","startAutoConfirm","setInterval","_oncancel","oncancel","labels","defaultFocus","reverseButtons","autoOk","autoCancel","p","_value","module","exports"],"mappings":"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","file":"static/js/1.4b88ba3c.chunk.js","sourcesContent":["/**\r\n * alertifyjs 1.14.0 http://alertifyjs.com\r\n * AlertifyJS is a javascript framework for developing pretty browser dialogs and notifications.\r\n * Copyright 2024 Mohammad Younes <Mohammad@alertifyjs.com> (http://alertifyjs.com) \r\n * Licensed under GPL 3 <https://opensource.org/licenses/gpl-3.0>*/\r\n( function ( window ) {\r\n    'use strict';\r\n    var NOT_DISABLED_NOT_RESET = ':not(:disabled):not(.ajs-reset)';\r\n    /**\r\n     * Keys enum\r\n     * @type {Object}\r\n     */\r\n    var keys = {\r\n        ENTER: 13,\r\n        ESC: 27,\r\n        F1: 112,\r\n        F12: 123,\r\n        LEFT: 37,\r\n        RIGHT: 39,\r\n        TAB: 9\r\n    };\r\n    /**\r\n     * Default options \r\n     * @type {Object}\r\n     */\r\n    var defaults = {\r\n        autoReset:true,\r\n        basic:false,\r\n        closable:true,\r\n        closableByDimmer:true,\r\n        invokeOnCloseOff:false,\r\n        frameless:false,\r\n        defaultFocusOff:false,\r\n        maintainFocus:true, //global default not per instance, applies to all dialogs\r\n        maximizable:true,\r\n        modal:true,\r\n        movable:true,\r\n        moveBounded:false,\r\n        overflow:true,\r\n        padding: true,\r\n        pinnable:true,\r\n        pinned:true,\r\n        preventBodyShift:false, //global default not per instance, applies to all dialogs\r\n        resizable:true,\r\n        startMaximized:false,\r\n        transition:'pulse',\r\n        transitionOff:false,\r\n        tabbable:['button', '[href]', 'input', 'select', 'textarea', '[tabindex]:not([tabindex^=\"-\"])'+NOT_DISABLED_NOT_RESET].join(NOT_DISABLED_NOT_RESET+','),//global\r\n        notifier:{\r\n            delay:5,\r\n            position:'bottom-right',\r\n            closeButton:false,\r\n            classes: {\r\n                base: 'alertify-notifier',\r\n                prefix:'ajs-',\r\n                message: 'ajs-message',\r\n                top: 'ajs-top',\r\n                right: 'ajs-right',\r\n                bottom: 'ajs-bottom',\r\n                left: 'ajs-left',\r\n                center: 'ajs-center',\r\n                visible: 'ajs-visible',\r\n                hidden: 'ajs-hidden',\r\n                close: 'ajs-close'\r\n            }\r\n        },\r\n        glossary:{\r\n            title:'AlertifyJS',\r\n            ok: 'OK',\r\n            cancel: 'Cancel',\r\n            acccpt: 'Accept',\r\n            deny: 'Deny',\r\n            confirm: 'Confirm',\r\n            decline: 'Decline',\r\n            close: 'Close',\r\n            maximize: 'Maximize',\r\n            restore: 'Restore',\r\n        },\r\n        theme:{\r\n            input:'ajs-input',\r\n            ok:'ajs-ok',\r\n            cancel:'ajs-cancel',\r\n        },\r\n        hooks:{\r\n            preinit:function(){},\r\n            postinit:function(){}\r\n        }\r\n    };\r\n    \r\n    //holds open dialogs instances\r\n    var openDialogs = [];\r\n\r\n    /**\r\n     * [Helper]  Adds the specified class(es) to the element.\r\n     *\r\n     * @element {node}      The element\r\n     * @className {string}  One or more space-separated classes to be added to the class attribute of the element.\r\n     * \r\n     * @return {undefined}\r\n     */\r\n    function addClass(element,classNames){\r\n        element.className += ' ' + classNames;\r\n    }\r\n    \r\n    /**\r\n     * [Helper]  Removes the specified class(es) from the element.\r\n     *\r\n     * @element {node}      The element\r\n     * @className {string}  One or more space-separated classes to be removed from the class attribute of the element.\r\n     * \r\n     * @return {undefined}\r\n     */\r\n    function removeClass(element, classNames) {\r\n        var original = element.className.split(' ');\r\n        var toBeRemoved = classNames.split(' ');\r\n        for (var x = 0; x < toBeRemoved.length; x += 1) {\r\n            var index = original.indexOf(toBeRemoved[x]);\r\n            if (index > -1){\r\n                original.splice(index,1);\r\n            }\r\n        }\r\n        element.className = original.join(' ');\r\n    }\r\n\r\n    /**\r\n     * [Helper]  Checks if the document is RTL\r\n     *\r\n     * @return {Boolean} True if the document is RTL, false otherwise.\r\n     */\r\n    function isRightToLeft(){\r\n        return window.getComputedStyle(document.body).direction === 'rtl';\r\n    }\r\n    /**\r\n     * [Helper]  Get the document current scrollTop\r\n     *\r\n     * @return {Number} current document scrollTop value\r\n     */\r\n    function getScrollTop(){\r\n        return ((document.documentElement && document.documentElement.scrollTop) || document.body.scrollTop);\r\n    }\r\n\r\n    /**\r\n     * [Helper]  Get the document current scrollLeft\r\n     *\r\n     * @return {Number} current document scrollLeft value\r\n     */\r\n    function getScrollLeft(){\r\n        return ((document.documentElement && document.documentElement.scrollLeft) || document.body.scrollLeft);\r\n    }\r\n\r\n    /**\r\n    * Helper: clear contents\r\n    *\r\n    */\r\n    function clearContents(element){\r\n        while (element.lastChild) {\r\n            element.removeChild(element.lastChild);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * detects strings, checks for both string and String instances\r\n     * this is unlike typeof(x) === 'string' which only accepts primitive strings\r\n     *\r\n     */\r\n    function isString(thing) {\r\n        return Object.prototype.toString.call(thing) === '[object String]';\r\n    }\r\n\r\n    /**\r\n     * Extends a given prototype by merging properties from base into sub.\r\n     *\r\n     * @sub {Object} sub The prototype being overwritten.\r\n     * @base {Object} base The prototype being written.\r\n     *\r\n     * @return {Object} The extended prototype.\r\n     */\r\n    function copy(src) {\r\n        if(null === src){\r\n            return src;\r\n        }\r\n        var cpy;\r\n        if(Array.isArray(src)){\r\n            cpy = [];\r\n            for(var x=0;x<src.length;x+=1){\r\n                cpy.push(copy(src[x]));\r\n            }\r\n            return cpy;\r\n        }\r\n      \r\n        if(src instanceof Date){\r\n            return new Date(src.getTime());\r\n        }\r\n      \r\n        if(src instanceof RegExp){\r\n            cpy = new RegExp(src.source);\r\n            cpy.global = src.global;\r\n            cpy.ignoreCase = src.ignoreCase;\r\n            cpy.multiline = src.multiline;\r\n            cpy.lastIndex = src.lastIndex;\r\n            return cpy;\r\n        }\r\n        \r\n        if(typeof src === 'object'){\r\n            cpy = {};\r\n            // copy dialog pototype over definition.\r\n            for (var prop in src) {\r\n                if (src.hasOwnProperty(prop)) {\r\n                    cpy[prop] = copy(src[prop]);\r\n                }\r\n            }\r\n            return cpy;\r\n        }\r\n        return src;\r\n    }\r\n    /**\r\n      * Helper: destruct the dialog\r\n      *\r\n      */\r\n    function destruct(instance, initialize){\r\n        if(instance.elements){\r\n            //delete the dom and it's references.\r\n            var root = instance.elements.root;\r\n            root.parentNode.removeChild(root);\r\n            delete instance.elements;\r\n            //copy back initial settings.\r\n            instance.settings = copy(instance.__settings);\r\n            //re-reference init function.\r\n            instance.__init = initialize;\r\n            //delete __internal variable to allow re-initialization.\r\n            delete instance.__internal;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test to check if passive event listeners are supported.\r\n     */\r\n    var IsPassiveSupported = false;\r\n    try {\r\n        var options = Object.defineProperty({}, 'passive', {\r\n            get: function () {\r\n                IsPassiveSupported = true;\r\n            }\r\n        });\r\n        window.addEventListener('test', options, options);\r\n        window.removeEventListener('test', options, options);\r\n    } catch (e) {}\r\n\r\n     /**\r\n     * Removes an event listener\r\n     *\r\n     * @param {HTMLElement} el The EventTarget to register the listenr on.\r\n     * @param {string} event The event type to listen for.\r\n     * @param {Function} handler The function to handle the event.\r\n     * @param {boolean} useCapture Specifices if the event to be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree.\r\n     * @param {boolean} passive A Boolean which, if true, indicates that the function specified by listener will never call preventDefault().\r\n     */\r\n    var on = function (el, event, fn, useCapture, passive) {\r\n        el.addEventListener(event, fn, IsPassiveSupported ? { capture: useCapture, passive: passive } : useCapture === true);\r\n    };\r\n\r\n    /**\r\n     * Removes an event listener\r\n     *\r\n     * @param {HTMLElement} el The EventTarget to unregister the listenr from.\r\n     * @param {string} event The event type to remove.\r\n     * @param {Function} fn The event handler to remove.\r\n     * @param {boolean} useCapture Specifices if the event to be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree.\r\n     * @param {boolean} passive A Boolean which, if true, indicates that the function specified by listener will never call preventDefault().\r\n     */\r\n    var off = function (el, event, fn, useCapture, passive) {\r\n        el.removeEventListener(event, fn, IsPassiveSupported ? { capture: useCapture, passive: passive } : useCapture === true);\r\n    };\r\n\r\n    /**\r\n     * Prevent default event from firing\r\n     *\r\n     * @param  {Event} event Event object\r\n     * @return {undefined}\r\n\r\n    function prevent ( event ) {\r\n        if ( event ) {\r\n            if ( event.preventDefault ) {\r\n                event.preventDefault();\r\n            } else {\r\n                event.returnValue = false;\r\n            }\r\n        }\r\n    }\r\n    */\r\n    var transition = (function () {\r\n        var t, type;\r\n        var supported = false;\r\n        var transitions = {\r\n            'animation'        : 'animationend',\r\n            'OAnimation'       : 'oAnimationEnd oanimationend',\r\n            'msAnimation'      : 'MSAnimationEnd',\r\n            'MozAnimation'     : 'animationend',\r\n            'WebkitAnimation'  : 'webkitAnimationEnd'\r\n        };\r\n\r\n        for (t in transitions) {\r\n            if (document.documentElement.style[t] !== undefined) {\r\n                type = transitions[t];\r\n                supported = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return {\r\n            type: type,\r\n            supported: supported\r\n        };\r\n    }());\r\n\r\n    /**\r\n    * Creates event handler delegate that sends the instance as last argument.\r\n    * \r\n    * @return {Function}    a function wrapper which sends the instance as last argument.\r\n    */\r\n    function delegate(context, method) {\r\n        return function () {\r\n            if (arguments.length > 0) {\r\n                var args = [];\r\n                for (var x = 0; x < arguments.length; x += 1) {\r\n                    args.push(arguments[x]);\r\n                }\r\n                args.push(context);\r\n                return method.apply(context, args);\r\n            }\r\n            return method.apply(context, [null, context]);\r\n        };\r\n    }\r\n    /**\r\n    * Helper for creating a dialog close event.\r\n    * \r\n    * @return {object}\r\n    */\r\n    function createCloseEvent(index, button) {\r\n        return {\r\n            index: index,\r\n            button: button,\r\n            cancel: false\r\n        };\r\n    }\r\n    /**\r\n    * Helper for dispatching events.\r\n    *\r\n    * @param  {string} evenType The type of the event to disptach.\r\n    * @param  {object} instance The dialog instance disptaching the event.\r\n    *\r\n    * @return   {any}   The result of the invoked function.\r\n    */\r\n    function dispatchEvent(eventType, instance) {\r\n        if ( typeof instance.get(eventType) === 'function' ) {\r\n            return instance.get(eventType).call(instance);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Super class for all dialogs\r\n     *\r\n     * @return {Object}\t\tbase dialog prototype\r\n     */\r\n    var dialog = (function () {\r\n        var //holds the list of used keys.\r\n            usedKeys = [],\r\n            //dummy variable, used to trigger dom reflow.\r\n            reflow = null,\r\n            //holds body tab index in case it has any.\r\n            tabindex = false,\r\n            //condition for detecting safari\r\n            isSafari = window.navigator.userAgent.indexOf('Safari') > -1 && window.navigator.userAgent.indexOf('Chrome') < 0,\r\n            //dialog building blocks\r\n            templates = {\r\n                dimmer:'<div class=\"ajs-dimmer\"></div>',\r\n                /*tab index required to fire click event before body focus*/\r\n                modal: '<div class=\"ajs-modal\" tabindex=\"0\"></div>',\r\n                dialog: '<div class=\"ajs-dialog\" tabindex=\"0\"></div>',\r\n                reset: '<button class=\"ajs-reset\"></button>',\r\n                commands: '<div class=\"ajs-commands\"><button class=\"ajs-pin\"></button><button class=\"ajs-maximize\"></button><button class=\"ajs-close\"></button></div>',\r\n                header: '<div class=\"ajs-header\"></div>',\r\n                body: '<div class=\"ajs-body\"></div>',\r\n                content: '<div class=\"ajs-content\"></div>',\r\n                footer: '<div class=\"ajs-footer\"></div>',\r\n                buttons: { primary: '<div class=\"ajs-primary ajs-buttons\"></div>', auxiliary: '<div class=\"ajs-auxiliary ajs-buttons\"></div>' },\r\n                button: '<button class=\"ajs-button\"></button>',\r\n                resizeHandle: '<div class=\"ajs-handle\"></div>',\r\n            },\r\n            //common class names\r\n            classes = {\r\n                animationIn: 'ajs-in',\r\n                animationOut: 'ajs-out',\r\n                base: 'alertify',\r\n                basic:'ajs-basic',\r\n                capture: 'ajs-capture',\r\n                closable:'ajs-closable',\r\n                fixed: 'ajs-fixed',\r\n                frameless:'ajs-frameless',\r\n                hidden: 'ajs-hidden',\r\n                maximize: 'ajs-maximize',\r\n                maximized: 'ajs-maximized',\r\n                maximizable:'ajs-maximizable',\r\n                modeless: 'ajs-modeless',\r\n                movable: 'ajs-movable',\r\n                noSelection: 'ajs-no-selection',\r\n                noOverflow: 'ajs-no-overflow',\r\n                noPadding:'ajs-no-padding',\r\n                pin:'ajs-pin',\r\n                pinnable:'ajs-pinnable',\r\n                prefix: 'ajs-',\r\n                resizable: 'ajs-resizable',\r\n                restore: 'ajs-restore',\r\n                shake:'ajs-shake',\r\n                unpinned:'ajs-unpinned',\r\n                noTransition:'ajs-no-transition'\r\n            };\r\n\r\n        /**\r\n         * Helper: initializes the dialog instance\r\n         * \r\n         * @return\t{Number}\tThe total count of currently open modals.\r\n         */\r\n        function initialize(instance){\r\n            \r\n            if(!instance.__internal){\r\n                //invoke preinit global hook\r\n                alertify.defaults.hooks.preinit(instance);\r\n                //no need to expose init after this.\r\n                delete instance.__init;\r\n              \r\n                //keep a copy of initial dialog settings\r\n                if(!instance.__settings){\r\n                    instance.__settings = copy(instance.settings);\r\n                }\r\n                \r\n                //get dialog buttons/focus setup\r\n                var setup;\r\n                if(typeof instance.setup === 'function'){\r\n                    setup = instance.setup();\r\n                    setup.options = setup.options  || {};\r\n                    setup.focus = setup.focus  || {};\r\n                }else{\r\n                    setup = {\r\n                        buttons:[],\r\n                        focus:{\r\n                            element:null,\r\n                            select:false\r\n                        },\r\n                        options:{\r\n                        }\r\n                    };\r\n                }\r\n                \r\n                //initialize hooks object.\r\n                if(typeof instance.hooks !== 'object'){\r\n                    instance.hooks = {};\r\n                }\r\n\r\n                //copy buttons defintion\r\n                var buttonsDefinition = [];\r\n                if(Array.isArray(setup.buttons)){\r\n                    for(var b=0;b<setup.buttons.length;b+=1){\r\n                        var ref  = setup.buttons[b],\r\n                            cpy = {};\r\n                        for (var i in ref) {\r\n                            if (ref.hasOwnProperty(i)) {\r\n                                cpy[i] = ref[i];\r\n                            }\r\n                        }\r\n                        buttonsDefinition.push(cpy);\r\n                    }\r\n                }\r\n\r\n                var internal = instance.__internal = {\r\n                    /**\r\n                     * Flag holding the open state of the dialog\r\n                     * \r\n                     * @type {Boolean}\r\n                     */\r\n                    isOpen:false,\r\n                    /**\r\n                     * Active element is the element that will receive focus after\r\n                     * closing the dialog. It defaults as the body tag, but gets updated\r\n                     * to the last focused element before the dialog was opened.\r\n                     *\r\n                     * @type {Node}\r\n                     */\r\n                    activeElement:document.body,\r\n                    timerIn:undefined,\r\n                    timerOut:undefined,\r\n                    buttons: buttonsDefinition,\r\n                    focus: setup.focus,\r\n                    options: {\r\n                        title: undefined,\r\n                        modal: undefined,\r\n                        basic:undefined,\r\n                        frameless:undefined,\r\n                        defaultFocusOff:undefined,\r\n                        pinned: undefined,\r\n                        movable: undefined,\r\n                        moveBounded:undefined,\r\n                        resizable: undefined,\r\n                        autoReset: undefined,\r\n                        closable: undefined,\r\n                        closableByDimmer: undefined,\r\n                        invokeOnCloseOff:undefined,\r\n                        maximizable: undefined,\r\n                        startMaximized: undefined,\r\n                        pinnable: undefined,\r\n                        transition: undefined,\r\n                        transitionOff: undefined,\r\n                        padding:undefined,\r\n                        overflow:undefined,\r\n                        onshow:undefined,\r\n                        onclosing:undefined,\r\n                        onclose:undefined,\r\n                        onfocus:undefined,\r\n                        onmove:undefined,\r\n                        onmoved:undefined,\r\n                        onresize:undefined,\r\n                        onresized:undefined,\r\n                        onmaximize:undefined,\r\n                        onmaximized:undefined,\r\n                        onrestore:undefined,\r\n                        onrestored:undefined\r\n                    },\r\n                    resetHandler:undefined,\r\n                    beginMoveHandler:undefined,\r\n                    beginResizeHandler:undefined,\r\n                    bringToFrontHandler:undefined,\r\n                    modalClickHandler:undefined,\r\n                    buttonsClickHandler:undefined,\r\n                    commandsClickHandler:undefined,\r\n                    transitionInHandler:undefined,\r\n                    transitionOutHandler:undefined,\r\n                    destroy:undefined\r\n                };\r\n\r\n                var elements = {};\r\n                //root node\r\n                elements.root = document.createElement('div');\r\n                //prevent FOUC in case of async styles loading.\r\n                elements.root.style.display = 'none';\r\n                elements.root.className = classes.base + ' ' + classes.hidden + ' ';\r\n\r\n                elements.root.innerHTML = templates.dimmer + templates.modal;\r\n                \r\n                //dimmer\r\n                elements.dimmer = elements.root.firstChild;\r\n\r\n                //dialog\r\n                elements.modal = elements.root.lastChild;\r\n                elements.modal.innerHTML = templates.dialog;\r\n                elements.dialog = elements.modal.firstChild;\r\n                elements.dialog.innerHTML = templates.reset + templates.commands + templates.header + templates.body + templates.footer + templates.resizeHandle + templates.reset;\r\n\r\n                //reset links\r\n                elements.reset = [];\r\n                elements.reset.push(elements.dialog.firstChild);\r\n                elements.reset.push(elements.dialog.lastChild);\r\n                \r\n                //commands\r\n                elements.commands = {};\r\n                elements.commands.container = elements.reset[0].nextSibling;\r\n                elements.commands.pin = elements.commands.container.firstChild;\r\n                elements.commands.maximize = elements.commands.pin.nextSibling;\r\n                elements.commands.close = elements.commands.maximize.nextSibling;\r\n                \r\n                //header\r\n                elements.header = elements.commands.container.nextSibling;\r\n\r\n                //body\r\n                elements.body = elements.header.nextSibling;\r\n                elements.body.innerHTML = templates.content;\r\n                elements.content = elements.body.firstChild;\r\n\r\n                //footer\r\n                elements.footer = elements.body.nextSibling;\r\n                elements.footer.innerHTML = templates.buttons.auxiliary + templates.buttons.primary;\r\n                \r\n                //resize handle\r\n                elements.resizeHandle = elements.footer.nextSibling;\r\n\r\n                //buttons\r\n                elements.buttons = {};\r\n                elements.buttons.auxiliary = elements.footer.firstChild;\r\n                elements.buttons.primary = elements.buttons.auxiliary.nextSibling;\r\n                elements.buttons.primary.innerHTML = templates.button;\r\n                elements.buttonTemplate = elements.buttons.primary.firstChild;\r\n                //remove button template\r\n                elements.buttons.primary.removeChild(elements.buttonTemplate);\r\n                               \r\n                for(var x=0; x < instance.__internal.buttons.length; x+=1) {\r\n                    var button = instance.__internal.buttons[x];\r\n                    \r\n                    // add to the list of used keys.\r\n                    if(usedKeys.indexOf(button.key) < 0){\r\n                        usedKeys.push(button.key);\r\n                    }\r\n\r\n                    button.element = elements.buttonTemplate.cloneNode();\r\n                    button.element.innerHTML = button.text;\r\n                    if(typeof button.className === 'string' &&  button.className !== ''){\r\n                        addClass(button.element, button.className);\r\n                    }\r\n                    for(var key in button.attrs){\r\n                        if(key !== 'className' && button.attrs.hasOwnProperty(key)){\r\n                            button.element.setAttribute(key, button.attrs[key]);\r\n                        }\r\n                    }\r\n                    if(button.scope === 'auxiliary'){\r\n                        elements.buttons.auxiliary.appendChild(button.element);\r\n                    }else{\r\n                        elements.buttons.primary.appendChild(button.element);\r\n                    }\r\n                }\r\n                //make elements pubic\r\n                instance.elements = elements;\r\n                \r\n                //save event handlers delegates\r\n                internal.resetHandler = delegate(instance, onReset);\r\n                internal.beginMoveHandler = delegate(instance, beginMove);\r\n                internal.beginResizeHandler = delegate(instance, beginResize);\r\n                internal.bringToFrontHandler = delegate(instance, bringToFront);\r\n                internal.modalClickHandler = delegate(instance, modalClickHandler);\r\n                internal.buttonsClickHandler = delegate(instance, buttonsClickHandler);\r\n                internal.commandsClickHandler = delegate(instance, commandsClickHandler);\r\n                internal.transitionInHandler = delegate(instance, handleTransitionInEvent);\r\n                internal.transitionOutHandler = delegate(instance, handleTransitionOutEvent);\r\n\r\n                //settings\r\n                for(var opKey in internal.options){\r\n                    if(setup.options[opKey] !== undefined){\r\n                        // if found in user options\r\n                        instance.set(opKey, setup.options[opKey]);\r\n                    }else if(alertify.defaults.hasOwnProperty(opKey)) {\r\n                        // else if found in defaults options\r\n                        instance.set(opKey, alertify.defaults[opKey]);\r\n                    }else if(opKey === 'title' ) {\r\n                        // else if title key, use alertify.defaults.glossary\r\n                        instance.set(opKey, alertify.defaults.glossary[opKey]);\r\n                    }\r\n                }\r\n\r\n                // allow dom customization\r\n                if(typeof instance.build === 'function'){\r\n                    instance.build();\r\n                }\r\n\r\n                //invoke postinit global hook\r\n                alertify.defaults.hooks.postinit(instance);\r\n            }\r\n\r\n            //add to the end of the DOM tree.\r\n            document.body.appendChild(instance.elements.root);\r\n        }\r\n\r\n        /**\r\n         * Helper: maintains scroll position\r\n         *\r\n         */\r\n        var scrollX, scrollY;\r\n        function saveScrollPosition(){\r\n            scrollX = getScrollLeft();\r\n            scrollY = getScrollTop();\r\n        }\r\n        function restoreScrollPosition(){\r\n            window.scrollTo(scrollX, scrollY);\r\n        }\r\n\r\n        /**\r\n         * Helper: adds/removes no-overflow class from body\r\n         *\r\n         */\r\n        function ensureNoOverflow(){\r\n            var requiresNoOverflow = 0;\r\n            for(var x=0;x<openDialogs.length;x+=1){\r\n                var instance = openDialogs[x];\r\n                if(instance.isModal() || instance.isMaximized()){\r\n                    requiresNoOverflow+=1;\r\n                }\r\n            }\r\n            if(requiresNoOverflow === 0 && document.body.className.indexOf(classes.noOverflow) >= 0){\r\n                //last open modal or last maximized one\r\n                removeClass(document.body, classes.noOverflow);\r\n                preventBodyShift(false);\r\n            }else if(requiresNoOverflow > 0 && document.body.className.indexOf(classes.noOverflow) < 0){\r\n                //first open modal or first maximized one\r\n                preventBodyShift(true);\r\n                addClass(document.body, classes.noOverflow);\r\n            }\r\n        }\r\n        var top = '', topScroll = 0;\r\n        /**\r\n         * Helper: prevents body shift.\r\n         *\r\n         */\r\n        function preventBodyShift(add){\r\n            if(alertify.defaults.preventBodyShift){\r\n                if(add && document.documentElement.scrollHeight > document.documentElement.clientHeight ){//&& openDialogs[openDialogs.length-1].elements.dialog.clientHeight <= document.documentElement.clientHeight){\r\n                    topScroll = scrollY;\r\n                    top = window.getComputedStyle(document.body).top;\r\n                    addClass(document.body, classes.fixed);\r\n                    document.body.style.top = -scrollY + 'px';\r\n                } else if(!add) {\r\n                    scrollY = topScroll;\r\n                    document.body.style.top = top;\r\n                    removeClass(document.body, classes.fixed);\r\n                    restoreScrollPosition();\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Sets the name of the transition used to show/hide the dialog\r\n         * \r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         */\r\n        function updateTransition(instance, value, oldValue){\r\n            if(isString(oldValue)){\r\n                removeClass(instance.elements.root,classes.prefix +  oldValue);\r\n            }\r\n            addClass(instance.elements.root, classes.prefix + value);\r\n            reflow = instance.elements.root.offsetWidth;\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog no transition \r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateTransitionOff(instance){\r\n            if (instance.get('transitionOff')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.noTransition);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.noTransition);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog display mode\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateDisplayMode(instance){\r\n            if(instance.get('modal')){\r\n\r\n                //make modal\r\n                removeClass(instance.elements.root, classes.modeless);\r\n\r\n                //only if open\r\n                if(instance.isOpen()){\r\n                    unbindModelessEvents(instance);\r\n\r\n                    //in case a pinned modless dialog was made modal while open.\r\n                    updateAbsPositionFix(instance);\r\n\r\n                    ensureNoOverflow();\r\n                }\r\n            }else{\r\n                //make modelss\r\n                addClass(instance.elements.root, classes.modeless);\r\n\r\n                //only if open\r\n                if(instance.isOpen()){\r\n                    bindModelessEvents(instance);\r\n\r\n                    //in case pin/unpin was called while a modal is open\r\n                    updateAbsPositionFix(instance);\r\n\r\n                    ensureNoOverflow();\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog basic view mode \r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateBasicMode(instance){\r\n            if (instance.get('basic')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.basic);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.basic);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog frameless view mode \r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateFramelessMode(instance){\r\n            if (instance.get('frameless')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.frameless);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.frameless);\r\n            }\r\n        }\r\n\t\t\r\n        /**\r\n         * Helper: Brings the modeless dialog to front, attached to modeless dialogs.\r\n         *\r\n         * @param {Event} event Focus event\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bringToFront(event, instance){\r\n            \r\n            // Do not bring to front if preceeded by an open modal\r\n            var index = openDialogs.indexOf(instance);\r\n            for(var x=index+1;x<openDialogs.length;x+=1){\r\n                if(openDialogs[x].isModal()){\r\n                    return;\r\n                }\r\n            }\r\n\t\t\t\r\n            // Bring to front by making it the last child.\r\n            if(document.body.lastChild !== instance.elements.root){\r\n                document.body.appendChild(instance.elements.root);\r\n                //also make sure its at the end of the list\r\n                openDialogs.splice(openDialogs.indexOf(instance),1);\r\n                openDialogs.push(instance);\r\n                setFocus(instance);\r\n            }\r\n\t\t\t\r\n            return false;\r\n        }\r\n\t\t\r\n        /**\r\n         * Helper: reflects dialogs options updates\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {String} option The updated option name.\r\n         *\r\n         * @return\t{undefined}\t\r\n         */\r\n        function optionUpdated(instance, option, oldValue, newValue){\r\n            switch(option){\r\n            case 'title':\r\n                instance.setHeader(newValue);\r\n                break;\r\n            case 'modal':\r\n                updateDisplayMode(instance);\r\n                break;\r\n            case 'basic':\r\n                updateBasicMode(instance);\r\n                break;\r\n            case 'frameless':\r\n                updateFramelessMode(instance);\r\n                break;\r\n            case 'pinned':\r\n                updatePinned(instance);\r\n                break;\r\n            case 'closable':\r\n                updateClosable(instance);\r\n                break;\r\n            case 'maximizable':\r\n                updateMaximizable(instance);\r\n                break;\r\n            case 'pinnable':\r\n                updatePinnable(instance);\r\n                break;\r\n            case 'movable':\r\n                updateMovable(instance);\r\n                break;\r\n            case 'resizable':\r\n                updateResizable(instance);\r\n                break;\r\n            case 'padding':\r\n                if(newValue){\r\n                    removeClass(instance.elements.root, classes.noPadding);\r\n                }else if(instance.elements.root.className.indexOf(classes.noPadding) < 0){\r\n                    addClass(instance.elements.root, classes.noPadding);\r\n                }\r\n                break;\r\n            case 'overflow':\r\n                if(newValue){\r\n                    removeClass(instance.elements.root, classes.noOverflow);\r\n                }else if(instance.elements.root.className.indexOf(classes.noOverflow) < 0){\r\n                    addClass(instance.elements.root, classes.noOverflow);\r\n                }\r\n                break;\r\n            case 'transition':\r\n                updateTransition(instance,newValue, oldValue);\r\n                break;\r\n            case 'transitionOff':\r\n                updateTransitionOff(instance);\r\n                break;\r\n            }\r\n\r\n            // internal on option updated event\r\n            if(typeof instance.hooks.onupdate === 'function'){\r\n                instance.hooks.onupdate.call(instance, option, oldValue, newValue);\r\n            }\r\n        }\r\n\t\t\r\n        /**\r\n         * Helper: reflects dialogs options updates\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Object} obj The object to set/get a value on/from.\r\n         * @param {Function} callback The callback function to call if the key was found.\r\n         * @param {String|Object} key A string specifying a propery name or a collection of key value pairs.\r\n         * @param {Object} value Optional, the value associated with the key (in case it was a string).\r\n         * @param {String} option The updated option name.\r\n         *\r\n         * @return\t{Object} result object \r\n         *\tThe result objects has an 'op' property, indicating of this is a SET or GET operation.\r\n         *\t\tGET: \r\n         *\t\t- found: a flag indicating if the key was found or not.\r\n         *\t\t- value: the property value.\r\n         *\t\tSET:\r\n         *\t\t- items: a list of key value pairs of the properties being set.\r\n         *\t\t\t\teach contains:\r\n         *\t\t\t\t\t- found: a flag indicating if the key was found or not.\r\n         *\t\t\t\t\t- key: the property key.\r\n         *\t\t\t\t\t- value: the property value.\r\n         */\r\n        function update(instance, obj, callback, key, value){\r\n            var result = {op:undefined, items: [] };\r\n            if(typeof value === 'undefined' && typeof key === 'string') {\r\n                //get\r\n                result.op = 'get';\r\n                if(obj.hasOwnProperty(key)){\r\n                    result.found = true;\r\n                    result.value = obj[key];\r\n                }else{\r\n                    result.found = false;\r\n                    result.value = undefined;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                var old;\r\n                //set\r\n                result.op = 'set';\r\n                if(typeof key === 'object'){\r\n                    //set multiple\r\n                    var args = key;\r\n                    for (var prop in args) {\r\n                        if (obj.hasOwnProperty(prop)) {\r\n                            if(obj[prop] !== args[prop]){\r\n                                old = obj[prop];\r\n                                obj[prop] = args[prop];\r\n                                callback.call(instance,prop, old, args[prop]);\r\n                            }\r\n                            result.items.push({ 'key': prop, 'value': args[prop], 'found':true});\r\n                        }else{\r\n                            result.items.push({ 'key': prop, 'value': args[prop], 'found':false});\r\n                        }\r\n                    }\r\n                } else if (typeof key === 'string'){\r\n                    //set single\r\n                    if (obj.hasOwnProperty(key)) {\r\n                        if(obj[key] !== value){\r\n                            old  = obj[key];\r\n                            obj[key] = value;\r\n                            callback.call(instance,key, old, value);\r\n                        }\r\n                        result.items.push({'key': key, 'value': value , 'found':true});\r\n\r\n                    }else{\r\n                        result.items.push({'key': key, 'value': value , 'found':false});\r\n                    }\r\n                } else {\r\n                    //invalid params\r\n                    throw new Error('args must be a string or object');\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n\r\n        /**\r\n         * Triggers a close event.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function triggerClose(instance) {\r\n            var found;\r\n            triggerCallback(instance, function (button) {\r\n                return found = instance.get('invokeOnCloseOff') !== true && (button.invokeOnClose === true);\r\n            });\r\n            //none of the buttons registered as onclose callback\r\n            //close the dialog\r\n            if (!found && instance.isOpen()) {\r\n                instance.close();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Dialogs commands event handler, attached to the dialog commands element.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function commandsClickHandler(event, instance) {\r\n            var target = event.srcElement || event.target;\r\n            switch (target) {\r\n            case instance.elements.commands.pin:\r\n                if (!instance.isPinned()) {\r\n                    pin(instance);\r\n                } else {\r\n                    unpin(instance);\r\n                }\r\n                break;\r\n            case instance.elements.commands.maximize:\r\n                if (!instance.isMaximized()) {\r\n                    maximize(instance);\r\n                } else {\r\n                    restore(instance);\r\n                }\r\n                break;\r\n            case instance.elements.commands.close:\r\n                triggerClose(instance);\r\n                break;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Helper: pins the modeless dialog.\r\n         *\r\n         * @param {Object} instance\tThe dialog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function pin(instance) {\r\n            //pin the dialog\r\n            instance.set('pinned', true);\r\n        }\r\n\r\n        /**\r\n         * Helper: unpins the modeless dialog.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function unpin(instance) {\r\n            //unpin the dialog \r\n            instance.set('pinned', false);\r\n        }\r\n\r\n\r\n        /**\r\n         * Helper: enlarges the dialog to fill the entire screen.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function maximize(instance) {\r\n            // allow custom `onmaximize` method\r\n            dispatchEvent('onmaximize', instance);\r\n            //maximize the dialog \r\n            addClass(instance.elements.root, classes.maximized);\r\n            if (instance.isOpen()) {\r\n                ensureNoOverflow();\r\n            }\r\n            // allow custom `onmaximized` method\r\n            dispatchEvent('onmaximized', instance);\r\n        }\r\n\r\n        /**\r\n         * Helper: returns the dialog to its former size.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function restore(instance) {\r\n            // allow custom `onrestore` method\r\n            dispatchEvent('onrestore', instance);\r\n            //maximize the dialog \r\n            removeClass(instance.elements.root, classes.maximized);\r\n            if (instance.isOpen()) {\r\n                ensureNoOverflow();\r\n            }\r\n            // allow custom `onrestored` method\r\n            dispatchEvent('onrestored', instance);\r\n        }\r\n\r\n        /**\r\n         * Show or hide the maximize box.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updatePinnable(instance) {\r\n            if (instance.get('pinnable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.pinnable);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.pinnable);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Helper: Fixes the absolutly positioned modal div position.\r\n         *\r\n         * @param {Object} instance The dialog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function addAbsPositionFix(instance) {\r\n            var scrollLeft = getScrollLeft();\r\n            instance.elements.modal.style.marginTop = getScrollTop() + 'px';\r\n            instance.elements.modal.style.marginLeft = scrollLeft + 'px';\r\n            instance.elements.modal.style.marginRight = (-scrollLeft) + 'px';\r\n        }\r\n\r\n        /**\r\n         * Helper: Removes the absolutly positioned modal div position fix.\r\n         *\r\n         * @param {Object} instance The dialog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function removeAbsPositionFix(instance) {\r\n            var marginTop = parseInt(instance.elements.modal.style.marginTop, 10);\r\n            var marginLeft = parseInt(instance.elements.modal.style.marginLeft, 10);\r\n            instance.elements.modal.style.marginTop = '';\r\n            instance.elements.modal.style.marginLeft = '';\r\n            instance.elements.modal.style.marginRight = '';\r\n\r\n            if (instance.isOpen()) {\r\n                var top = 0,\r\n                    left = 0\r\n                ;\r\n                if (instance.elements.dialog.style.top !== '') {\r\n                    top = parseInt(instance.elements.dialog.style.top, 10);\r\n                }\r\n                instance.elements.dialog.style.top = (top + (marginTop - getScrollTop())) + 'px';\r\n\r\n                if (instance.elements.dialog.style.left !== '') {\r\n                    left = parseInt(instance.elements.dialog.style.left, 10);\r\n                }\r\n                instance.elements.dialog.style.left = (left + (marginLeft - getScrollLeft())) + 'px';\r\n            }\r\n        }\r\n        /**\r\n         * Helper: Adds/Removes the absolutly positioned modal div position fix based on its pinned setting.\r\n         *\r\n         * @param {Object} instance The dialog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateAbsPositionFix(instance) {\r\n            // if modeless and unpinned add fix\r\n            if (!instance.get('modal') && !instance.get('pinned')) {\r\n                addAbsPositionFix(instance);\r\n            } else {\r\n                removeAbsPositionFix(instance);\r\n            }\r\n        }\r\n        /**\r\n         * Toggles the dialog position lock | modeless only.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to make it modal, false otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updatePinned(instance) {\r\n            if (instance.get('pinned')) {\r\n                removeClass(instance.elements.root, classes.unpinned);\r\n                if (instance.isOpen()) {\r\n                    removeAbsPositionFix(instance);\r\n                }\r\n            } else {\r\n                addClass(instance.elements.root, classes.unpinned);\r\n                if (instance.isOpen() && !instance.isModal()) {\r\n                    addAbsPositionFix(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Show or hide the maximize box.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateMaximizable(instance) {\r\n            if (instance.get('maximizable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.maximizable);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.maximizable);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Show or hide the close box.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateClosable(instance) {\r\n            if (instance.get('closable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.closable);\r\n                bindClosableEvents(instance);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.closable);\r\n                unbindClosableEvents(instance);\r\n            }\r\n        }\r\n\r\n        \r\n        var cancelClick = false,// flag to cancel click event if already handled by end resize event (the mousedown, mousemove, mouseup sequence fires a click event.).\r\n            modalClickHandlerTS=0 // stores last click timestamp to prevent executing the handler twice on double click.\r\n            ;\r\n\r\n        /**\r\n         * Helper: closes the modal dialog when clicking the modal\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function modalClickHandler(event, instance) {\r\n            if(event.timeStamp - modalClickHandlerTS > 200 && (modalClickHandlerTS = event.timeStamp) && !cancelClick){\r\n                var target = event.srcElement || event.target;\r\n                if (instance.get('closableByDimmer') === true && target === instance.elements.modal) {\r\n                    triggerClose(instance);\r\n                }\r\n            }\r\n            cancelClick = false;\r\n        }\r\n\r\n        // stores last call timestamp to prevent triggering the callback twice.\r\n        var callbackTS = 0;\r\n        // flag to cancel keyup event if already handled by click event (pressing Enter on a focusted button).\r\n        var cancelKeyup = false;\r\n        /** \r\n         * Helper: triggers a button callback\r\n         *\r\n         * @param {Object}\t\tThe dilog instance.\r\n         * @param {Function}\tCallback to check which button triggered the event.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function triggerCallback(instance, check) {\r\n            if(Date.now() - callbackTS > 200 && (callbackTS = Date.now())){\r\n                for (var idx = 0; idx < instance.__internal.buttons.length; idx += 1) {\r\n                    var button = instance.__internal.buttons[idx];\r\n                    if (!button.element.disabled && check(button)) {\r\n                        var closeEvent = createCloseEvent(idx, button);\r\n                        if (typeof instance.callback === 'function') {\r\n                            instance.callback.apply(instance, [closeEvent]);\r\n                        }\r\n                        //close the dialog only if not canceled.\r\n                        if (closeEvent.cancel === false) {\r\n                            instance.close();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Clicks event handler, attached to the dialog footer.\r\n         *\r\n         * @param {Event}\t\tDOM event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function buttonsClickHandler(event, instance) {\r\n            var target = event.srcElement || event.target;\r\n            triggerCallback(instance, function (button) {\r\n                // if this button caused the click, cancel keyup event\r\n                return button.element.contains(target) && (cancelKeyup = true);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Keyup event handler, attached to the document.body\r\n         *\r\n         * @param {Event}\t\tDOM event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function keyupHandler(event) {\r\n            //hitting enter while button has focus will trigger keyup too.\r\n            //ignore if handled by clickHandler\r\n            if (cancelKeyup) {\r\n                cancelKeyup = false;\r\n                return;\r\n            }\r\n            var instance = openDialogs[openDialogs.length - 1];\r\n            var keyCode = event.keyCode;\r\n            if (instance.__internal.buttons.length === 0 && keyCode === keys.ESC && instance.get('closable') === true) {\r\n                triggerClose(instance);\r\n                return false;\r\n            }else if (usedKeys.indexOf(keyCode) > -1) {\r\n                triggerCallback(instance, function (button) {\r\n                    return button.key === keyCode;\r\n                });\r\n                return false;\r\n            }\r\n        }\r\n        /**\r\n        * Keydown event handler, attached to the document.body\r\n        *\r\n        * @param {Event}\t\tDOM event object.\r\n        * @param {Object}\t\tThe dilog instance.\r\n        * \r\n        * @return {undefined}\r\n        */\r\n        function keydownHandler(event) {\r\n            var instance = openDialogs[openDialogs.length - 1];\r\n            var keyCode = event.keyCode;\r\n            if (keyCode === keys.LEFT || keyCode === keys.RIGHT) {\r\n                var buttons = instance.__internal.buttons;\r\n                for (var x = 0; x < buttons.length; x += 1) {\r\n                    if (document.activeElement === buttons[x].element) {\r\n                        switch (keyCode) {\r\n                        case keys.LEFT:\r\n                            buttons[(x || buttons.length) - 1].element.focus();\r\n                            return;\r\n                        case keys.RIGHT:\r\n                            buttons[(x + 1) % buttons.length].element.focus();\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            }else if (keyCode < keys.F12 + 1 && keyCode > keys.F1 - 1 && usedKeys.indexOf(keyCode) > -1) {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                triggerCallback(instance, function (button) {\r\n                    return button.key === keyCode;\r\n                });\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Sets focus to proper dialog element\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Node} [resetTarget=undefined] DOM element to reset focus to.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function setFocus(instance, resetTarget) {\r\n            // reset target has already been determined.\r\n            if (resetTarget) {\r\n                resetTarget.focus();\r\n            } else {\r\n                // current instance focus settings\r\n                var focus = instance.__internal.focus;\r\n                // the focus element.\r\n                var element = focus.element;\r\n\r\n                switch (typeof focus.element) {\r\n                // a number means a button index\r\n                case 'number':\r\n                    if (instance.__internal.buttons.length > focus.element) {\r\n                        //in basic view, skip focusing the buttons.\r\n                        if (instance.get('basic') === true) {\r\n                            element = instance.elements.reset[0];\r\n                        } else {\r\n                            element = instance.__internal.buttons[focus.element].element;\r\n                        }\r\n                    }\r\n                    break;\r\n                // a string means querySelector to select from dialog body contents.\r\n                case 'string':\r\n                    element = instance.elements.body.querySelector(focus.element);\r\n                    break;\r\n                // a function should return the focus element.\r\n                case 'function':\r\n                    element = focus.element.call(instance);\r\n                    break;\r\n                }\r\n\r\n                // if no focus element, default to first reset element.\r\n                if (instance.get('defaultFocusOff') === true || ((typeof element === 'undefined' || element === null) && instance.__internal.buttons.length === 0)) {\r\n                    element = instance.elements.reset[0];\r\n                }\r\n                // focus\r\n                if (element && element.focus) {\r\n                    element.focus();\r\n                    // if selectable\r\n                    if (focus.select && element.select) {\r\n                        element.select();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Focus event handler, attached to document.body and dialogs own reset links.\r\n         * handles the focus for modal dialogs only.\r\n         *\r\n         * @param {Event} event DOM focus event object.\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function onReset(event, instance) {\r\n\r\n            // should work on last modal if triggered from document.body \r\n            if (!instance) {\r\n                for (var x = openDialogs.length - 1; x > -1; x -= 1) {\r\n                    if (openDialogs[x].isModal()) {\r\n                        instance = openDialogs[x];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(instance) {\r\n                // if modal\r\n                if (instance.isModal()) {\r\n                    // determine reset target to enable forward/backward tab cycle.\r\n                    var firstReset = instance.elements.reset[0],\r\n                        lastReset = instance.elements.reset[1],\r\n                        lastFocusedElement = event.relatedTarget,\r\n                        within = instance.elements.root.contains(lastFocusedElement),\r\n                        target = event.srcElement || event.target,\r\n                        resetTarget;\r\n\r\n                    //if the previous focused element element was outside the modal do nthing\r\n                    if(  /*first show */\r\n                        (target === firstReset && !within) ||\r\n                         /*focus cycle */\r\n                        (target === lastReset && lastFocusedElement === firstReset)){\r\n                        return;\r\n                    }else if(target === lastReset || target === document.body){\r\n                        resetTarget = firstReset;\r\n                    }else if(target === firstReset && lastFocusedElement === lastReset){\r\n                        resetTarget = findTabbable(instance);\r\n                    }else if(target === firstReset && within){\r\n                        resetTarget = findTabbable(instance, true);\r\n                    }\r\n                    // focus\r\n                    setFocus(instance, resetTarget);\r\n                }\r\n            }\r\n        }\r\n        function findTabbable(instance, last){\r\n            var tabbables = [].slice.call(instance.elements.dialog.querySelectorAll(defaults.tabbable));\r\n            if(last){\r\n                tabbables.reverse();\r\n            }\r\n            for(var x=0;x<tabbables.length;x+=1){\r\n                var tabbable = tabbables[x];\r\n                //check if visible\r\n                if(!!(tabbable.offsetParent || tabbable.offsetWidth || tabbable.offsetHeight || tabbable.getClientRects().length)){\r\n                    return tabbable;\r\n                }\r\n            }\r\n        }\r\n        function recycleTab(event) {\r\n            var instance = openDialogs[openDialogs.length - 1];\r\n            if (instance && event.shiftKey && event.keyCode === keys.TAB) {\r\n                instance.elements.reset[1].focus();\r\n            }\r\n        }\r\n        /**\r\n         * Transition in transitionend event handler. \r\n         *\r\n         * @param {Event}\t\tTransitionEnd event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function handleTransitionInEvent(event, instance) {\r\n            // clear the timer\r\n            clearTimeout(instance.__internal.timerIn);\r\n\r\n            // once transition is complete, set focus\r\n            setFocus(instance);\r\n\r\n            // allow handling key up after transition ended.\r\n            cancelKeyup = false;\r\n\r\n            // allow custom `onfocus` method\r\n            dispatchEvent('onfocus', instance);\r\n\r\n            // unbind the event\r\n            off(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);\r\n\r\n            removeClass(instance.elements.root, classes.animationIn);\r\n        }\r\n\r\n        /**\r\n         * Transition out transitionend event handler. \r\n         *\r\n         * @param {Event}\t\tTransitionEnd event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function handleTransitionOutEvent(event, instance) {\r\n            // clear the timer\r\n            clearTimeout(instance.__internal.timerOut);\r\n            // unbind the event\r\n            off(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);\r\n\r\n            // reset move updates\r\n            resetMove(instance);\r\n            // reset resize updates\r\n            resetResize(instance);\r\n\r\n            // restore if maximized\r\n            if (instance.isMaximized() && !instance.get('startMaximized')) {\r\n                restore(instance);\r\n            }\r\n\r\n            //destory the instance\r\n            if (typeof instance.__internal.destroy === 'function') {\r\n                instance.__internal.destroy.apply(instance);\r\n            }\r\n        }\r\n        /* Controls moving a dialog around */\r\n        //holde the current moving instance\r\n        var movable = null,\r\n            //holds the current X offset when move starts\r\n            offsetX = 0,\r\n            //holds the current Y offset when move starts\r\n            offsetY = 0,\r\n            xProp = 'pageX',\r\n            yProp = 'pageY',\r\n            bounds = null,\r\n            refreshTop = false,\r\n            moveDelegate = null\r\n        ;\r\n\r\n        /**\r\n         * Helper: sets the element top/left coordinates\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Node} element The element being moved.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function moveElement(event, element) {\r\n            var left = (event[xProp] - offsetX),\r\n                top  = (event[yProp] - offsetY);\r\n\r\n            if(refreshTop){\r\n                top -= document.body.scrollTop;\r\n            }\r\n           \r\n            element.style.left = left + 'px';\r\n            element.style.top = top + 'px';\r\n           \r\n        }\r\n        /**\r\n         * Helper: sets the element top/left coordinates within screen bounds\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Node} element The element being moved.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function moveElementBounded(event, element) {\r\n            var left = (event[xProp] - offsetX),\r\n                top  = (event[yProp] - offsetY);\r\n\r\n            if(refreshTop){\r\n                top -= document.body.scrollTop;\r\n            }\r\n            \r\n            element.style.left = Math.min(bounds.maxLeft, Math.max(bounds.minLeft, left)) + 'px';\r\n            if(refreshTop){\r\n                element.style.top = Math.min(bounds.maxTop, Math.max(bounds.minTop, top)) + 'px';\r\n            }else{\r\n                element.style.top = Math.max(bounds.minTop, top) + 'px';\r\n            }\r\n        }\r\n            \r\n\r\n        /**\r\n         * Triggers the start of a move event, attached to the header element mouse down event.\r\n         * Adds no-selection class to the body, disabling selection while moving.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance The dilog instance.\r\n         * \r\n         * @return {Boolean} false\r\n         */\r\n        function beginMove(event, instance) {\r\n            if (resizable === null && !instance.isMaximized() && instance.get('movable')) {\r\n                var eventSrc, left=0, top=0;\r\n                if (event.type === 'touchstart') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                    xProp = 'clientX';\r\n                    yProp = 'clientY';\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n\r\n                if (eventSrc) {\r\n\r\n                    var element = instance.elements.dialog;\r\n                    addClass(element, classes.capture);\r\n\r\n                    if (element.style.left) {\r\n                        left = parseInt(element.style.left, 10);\r\n                    }\r\n\r\n                    if (element.style.top) {\r\n                        top = parseInt(element.style.top, 10);\r\n                    }\r\n                    \r\n                    offsetX = eventSrc[xProp] - left;\r\n                    offsetY = eventSrc[yProp] - top;\r\n\r\n                    if(instance.isModal()){\r\n                        offsetY += instance.elements.modal.scrollTop;\r\n                    }else if(instance.isPinned()){\r\n                        offsetY -= document.body.scrollTop;\r\n                    }\r\n                    \r\n                    if(instance.get('moveBounded')){\r\n                        var current = element,\r\n                            offsetLeft = -left,\r\n                            offsetTop = -top;\r\n                        \r\n                        //calc offset\r\n                        do {\r\n                            offsetLeft += current.offsetLeft;\r\n                            offsetTop += current.offsetTop;\r\n                        } while (current = current.offsetParent);\r\n                        \r\n                        bounds = {\r\n                            maxLeft : offsetLeft,\r\n                            minLeft : -offsetLeft,\r\n                            maxTop  : document.documentElement.clientHeight - element.clientHeight - offsetTop,\r\n                            minTop  : -offsetTop\r\n                        };\r\n                        moveDelegate = moveElementBounded;\r\n                    }else{\r\n                        bounds = null;\r\n                        moveDelegate = moveElement;\r\n                    }\r\n                    \r\n                    // allow custom `onmove` method\r\n                    dispatchEvent('onmove', instance);\r\n\r\n                    refreshTop = !instance.isModal() && instance.isPinned();\r\n                    movable = instance;\r\n                    moveDelegate(eventSrc, element);\r\n                    addClass(document.body, classes.noSelection);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * The actual move handler,  attached to document.body mousemove event.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function move(event) {\r\n            if (movable) {\r\n                var eventSrc;\r\n                if (event.type === 'touchmove') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n                if (eventSrc) {\r\n                    moveDelegate(eventSrc, movable.elements.dialog);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Triggers the end of a move event,  attached to document.body mouseup event.\r\n         * Removes no-selection class from document.body, allowing selection.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function endMove() {\r\n            if (movable) {\r\n                var instance = movable;\r\n                movable = bounds = null;\r\n                removeClass(document.body, classes.noSelection);\r\n                removeClass(instance.elements.dialog, classes.capture);\r\n                // allow custom `onmoved` method\r\n                dispatchEvent('onmoved', instance);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Resets any changes made by moving the element to its original state,\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function resetMove(instance) {\r\n            movable = null;\r\n            var element = instance.elements.dialog;\r\n            element.style.left = element.style.top = '';\r\n        }\r\n\r\n        /**\r\n         * Updates the dialog move behavior.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateMovable(instance) {\r\n            if (instance.get('movable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.movable);\r\n                if (instance.isOpen()) {\r\n                    bindMovableEvents(instance);\r\n                }\r\n            } else {\r\n\r\n                //reset\r\n                resetMove(instance);\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.movable);\r\n                if (instance.isOpen()) {\r\n                    unbindMovableEvents(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        /* Controls moving a dialog around */\r\n        //holde the current instance being resized\t\t\r\n        var resizable = null,\r\n            //holds the staring left offset when resize starts.\r\n            startingLeft = Number.Nan,\r\n            //holds the staring width when resize starts.\r\n            startingWidth = 0,\r\n            //holds the initial width when resized for the first time.\r\n            minWidth = 0,\r\n            //holds the offset of the resize handle.\r\n            handleOffset = 0\r\n        ;\r\n\r\n        /**\r\n         * Helper: sets the element width/height and updates left coordinate if neccessary.\r\n         *\r\n         * @param {Event} event\tDOM mousemove event object.\r\n         * @param {Node} element The element being moved.\r\n         * @param {Boolean} pinned A flag indicating if the element being resized is pinned to the screen.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function resizeElement(event, element, pageRelative) {\r\n\r\n            //calculate offsets from 0,0\r\n            var current = element;\r\n            var offsetLeft = 0;\r\n            var offsetTop = 0;\r\n            do {\r\n                offsetLeft += current.offsetLeft;\r\n                offsetTop += current.offsetTop;\r\n            } while (current = current.offsetParent);\r\n\r\n            // determine X,Y coordinates.\r\n            var X, Y;\r\n            if (pageRelative === true) {\r\n                X = event.pageX;\r\n                Y = event.pageY;\r\n            } else {\r\n                X = event.clientX;\r\n                Y = event.clientY;\r\n            }\r\n            // rtl handling\r\n            var isRTL = isRightToLeft();\r\n            if (isRTL) {\r\n                // reverse X \r\n                X = document.body.offsetWidth - X;\r\n                // if has a starting left, calculate offsetRight\r\n                if (!isNaN(startingLeft)) {\r\n                    offsetLeft = document.body.offsetWidth - offsetLeft - element.offsetWidth;\r\n                }\r\n            }\r\n\r\n            // set width/height\r\n            element.style.height = (Y - offsetTop + handleOffset) + 'px';\r\n            element.style.width = (X - offsetLeft + handleOffset) + 'px';\r\n\r\n            // if the element being resized has a starting left, maintain it.\r\n            // the dialog is centered, divide by half the offset to maintain the margins.\r\n            if (!isNaN(startingLeft)) {\r\n                var diff = Math.abs(element.offsetWidth - startingWidth) * 0.5;\r\n                if (isRTL) {\r\n                    //negate the diff, why?\r\n                    //when growing it should decrease left\r\n                    //when shrinking it should increase left\r\n                    diff *= -1;\r\n                }\r\n                if (element.offsetWidth > startingWidth) {\r\n                    //growing\r\n                    element.style.left = (startingLeft + diff) + 'px';\r\n                } else if (element.offsetWidth >= minWidth) {\r\n                    //shrinking\r\n                    element.style.left = (startingLeft - diff) + 'px';\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Triggers the start of a resize event, attached to the resize handle element mouse down event.\r\n         * Adds no-selection class to the body, disabling selection while moving.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance The dilog instance.\r\n         * \r\n         * @return {Boolean} false\r\n         */\r\n        function beginResize(event, instance) {\r\n            if (!instance.isMaximized()) {\r\n                var eventSrc;\r\n                if (event.type === 'touchstart') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n                if (eventSrc) {\r\n                    // allow custom `onresize` method\r\n                    dispatchEvent('onresize', instance);\r\n                    \r\n                    resizable = instance;\r\n                    handleOffset = instance.elements.resizeHandle.offsetHeight / 2;\r\n                    var element = instance.elements.dialog;\r\n                    addClass(element, classes.capture);\r\n                    startingLeft = parseInt(element.style.left, 10);\r\n                    element.style.height = element.offsetHeight + 'px';\r\n                    element.style.minHeight = instance.elements.header.offsetHeight + instance.elements.footer.offsetHeight + 'px';\r\n                    element.style.width = (startingWidth = element.offsetWidth) + 'px';\r\n\r\n                    if (element.style.maxWidth !== 'none') {\r\n                        element.style.minWidth = (minWidth = element.offsetWidth) + 'px';\r\n                    }\r\n                    element.style.maxWidth = 'none';\r\n                    addClass(document.body, classes.noSelection);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * The actual resize handler,  attached to document.body mousemove event.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function resize(event) {\r\n            if (resizable) {\r\n                var eventSrc;\r\n                if (event.type === 'touchmove') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n                if (eventSrc) {\r\n                    resizeElement(eventSrc, resizable.elements.dialog, !resizable.get('modal') && !resizable.get('pinned'));\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Triggers the end of a resize event,  attached to document.body mouseup event.\r\n         * Removes no-selection class from document.body, allowing selection.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function endResize() {\r\n            if (resizable) {\r\n                var instance = resizable;\r\n                resizable = null;\r\n                removeClass(document.body, classes.noSelection);\r\n                removeClass(instance.elements.dialog, classes.capture);\r\n                cancelClick = true;\r\n                // allow custom `onresized` method\r\n                dispatchEvent('onresized', instance);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Resets any changes made by resizing the element to its original state.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function resetResize(instance) {\r\n            resizable = null;\r\n            var element = instance.elements.dialog;\r\n            if (element.style.maxWidth === 'none') {\r\n                //clear inline styles.\r\n                element.style.maxWidth = element.style.minWidth = element.style.width = element.style.height = element.style.minHeight = element.style.left = '';\r\n                //reset variables.\r\n                startingLeft = Number.Nan;\r\n                startingWidth = minWidth = handleOffset = 0;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Updates the dialog move behavior.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateResizable(instance) {\r\n            if (instance.get('resizable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.resizable);\r\n                if (instance.isOpen()) {\r\n                    bindResizableEvents(instance);\r\n                }\r\n            } else {\r\n                //reset\r\n                resetResize(instance);\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.resizable);\r\n                if (instance.isOpen()) {\r\n                    unbindResizableEvents(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Reset move/resize on window resize.\r\n         *\r\n         * @param {Event} event\twindow resize event object.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function windowResize(/*event*/) {\r\n            for (var x = 0; x < openDialogs.length; x += 1) {\r\n                var instance = openDialogs[x];\r\n                if (instance.get('autoReset')) {\r\n                    resetMove(instance);\r\n                    resetResize(instance);\r\n                }\r\n            }\r\n        }\r\n        /**\r\n         * Bind dialogs events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindEvents(instance) {\r\n            // if first dialog, hook global handlers\r\n            if (openDialogs.length === 1) {\r\n                //global\r\n                on(window, 'resize', windowResize);\r\n                on(document.body, 'keyup', keyupHandler);\r\n                on(document.body, 'keydown', keydownHandler);\r\n                on(document.body, 'focus', onReset);\r\n\r\n                //move\r\n                on(document.documentElement, 'mousemove', move);\r\n                on(document.documentElement, 'touchmove', move, false, false);\r\n                on(document.documentElement, 'mouseup', endMove);\r\n                on(document.documentElement, 'touchend', endMove);\r\n                //resize\r\n                on(document.documentElement, 'mousemove', resize);\r\n                on(document.documentElement, 'touchmove', resize, false, false);\r\n                on(document.documentElement, 'mouseup', endResize);\r\n                on(document.documentElement, 'touchend', endResize);\r\n            }\r\n\r\n            // common events\r\n            on(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);\r\n            on(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);\r\n            on(instance.elements.reset[0], 'focusin', instance.__internal.resetHandler);\r\n            on(instance.elements.reset[0], 'keydown', recycleTab);\r\n            on(instance.elements.reset[1], 'focusin', instance.__internal.resetHandler);\r\n\r\n            //prevent handling key up when dialog is being opened by a key stroke.\r\n            cancelKeyup = true;\r\n            // hook in transition handler\r\n            on(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);\r\n\r\n            // modelss only events\r\n            if (!instance.get('modal')) {\r\n                bindModelessEvents(instance);\r\n            }\r\n\r\n            // resizable\r\n            if (instance.get('resizable')) {\r\n                bindResizableEvents(instance);\r\n            }\r\n\r\n            // movable\r\n            if (instance.get('movable')) {\r\n                bindMovableEvents(instance);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Unbind dialogs events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindEvents(instance) {\r\n            // if last dialog, remove global handlers\r\n            if (openDialogs.length === 1) {\r\n                //global\r\n                off(window, 'resize', windowResize);\r\n                off(document.body, 'keyup', keyupHandler);\r\n                off(document.body, 'keydown', keydownHandler);\r\n                off(document.body, 'focus', onReset);\r\n                //move\r\n                off(document.documentElement, 'mousemove', move);\r\n                off(document.documentElement, 'mouseup', endMove);\r\n                //resize\r\n                off(document.documentElement, 'mousemove', resize);\r\n                off(document.documentElement, 'mouseup', endResize);\r\n            }\r\n\r\n            // common events\r\n            off(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);\r\n            off(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);\r\n            off(instance.elements.reset[0], 'focusin', instance.__internal.resetHandler);\r\n            off(instance.elements.reset[0], 'keydown', recycleTab);\r\n            off(instance.elements.reset[1], 'focusin', instance.__internal.resetHandler);\r\n\r\n            // hook out transition handler\r\n            on(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);\r\n\r\n            // modelss only events\r\n            if (!instance.get('modal')) {\r\n                unbindModelessEvents(instance);\r\n            }\r\n\r\n            // movable\r\n            if (instance.get('movable')) {\r\n                unbindMovableEvents(instance);\r\n            }\r\n\r\n            // resizable\r\n            if (instance.get('resizable')) {\r\n                unbindResizableEvents(instance);\r\n            }\r\n\r\n        }\r\n\r\n        /**\r\n         * Bind modeless specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindModelessEvents(instance) {\r\n            on(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);\r\n        }\r\n\r\n        /**\r\n         * Unbind modeless specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindModelessEvents(instance) {\r\n            off(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Bind movable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindMovableEvents(instance) {\r\n            on(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);\r\n            on(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler, false, false);\r\n        }\r\n\r\n        /**\r\n         * Unbind movable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindMovableEvents(instance) {\r\n            off(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);\r\n            off(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler, false, false);\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Bind resizable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindResizableEvents(instance) {\r\n            on(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);\r\n            on(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler, false, false);\r\n        }\r\n\r\n        /**\r\n         * Unbind resizable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindResizableEvents(instance) {\r\n            off(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);\r\n            off(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler, false, false);\r\n        }\r\n\r\n        /**\r\n         * Bind closable events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindClosableEvents(instance) {\r\n            on(instance.elements.modal, 'click', instance.__internal.modalClickHandler);\r\n        }\r\n\r\n        /**\r\n         * Unbind closable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindClosableEvents(instance) {\r\n            off(instance.elements.modal, 'click', instance.__internal.modalClickHandler);\r\n        }\r\n        // dialog API\r\n        return {\r\n            __init:initialize,\r\n            /**\r\n             * Check if dialog is currently open\r\n             *\r\n             * @return {Boolean}\r\n             */\r\n            isOpen: function () {\r\n                return this.__internal.isOpen;\r\n            },\r\n            isModal: function (){\r\n                return this.elements.root.className.indexOf(classes.modeless) < 0;\r\n            },\r\n            isMaximized:function(){\r\n                return this.elements.root.className.indexOf(classes.maximized) > -1;\r\n            },\r\n            isPinned:function(){\r\n                return this.elements.root.className.indexOf(classes.unpinned) < 0;\r\n            },\r\n            maximize:function(){\r\n                if(!this.isMaximized()){\r\n                    maximize(this);\r\n                }\r\n                return this;\r\n            },\r\n            restore:function(){\r\n                if(this.isMaximized()){\r\n                    restore(this);\r\n                }\r\n                return this;\r\n            },\r\n            pin:function(){\r\n                if(!this.isPinned()){\r\n                    pin(this);\r\n                }\r\n                return this;\r\n            },\r\n            unpin:function(){\r\n                if(this.isPinned()){\r\n                    unpin(this);\r\n                }\r\n                return this;\r\n            },\r\n            bringToFront:function(){\r\n                bringToFront(null, this);\r\n                return this;\r\n            },\r\n            /**\r\n             * Move the dialog to a specific x/y coordinates\r\n             *\r\n             * @param {Number} x    The new dialog x coordinate in pixels.\r\n             * @param {Number} y    The new dialog y coordinate in pixels.\r\n             *\r\n             * @return {Object} The dialog instance.\r\n             */\r\n            moveTo:function(x,y){\r\n                if(!isNaN(x) && !isNaN(y)){\r\n                    // allow custom `onmove` method\r\n                    dispatchEvent('onmove', this);\r\n                    \r\n                    var element = this.elements.dialog,\r\n                        current = element,\r\n                        offsetLeft = 0,\r\n                        offsetTop = 0;\r\n                    \r\n                    //subtract existing left,top\r\n                    if (element.style.left) {\r\n                        offsetLeft -= parseInt(element.style.left, 10);\r\n                    }\r\n                    if (element.style.top) {\r\n                        offsetTop -= parseInt(element.style.top, 10);\r\n                    }\r\n                    //calc offset\r\n                    do {\r\n                        offsetLeft += current.offsetLeft;\r\n                        offsetTop += current.offsetTop;\r\n                    } while (current = current.offsetParent);\r\n\r\n                    //calc left, top\r\n                    var left = (x - offsetLeft);\r\n                    var top  = (y - offsetTop);\r\n\r\n                    //// rtl handling\r\n                    if (isRightToLeft()) {\r\n                        left *= -1;\r\n                    }\r\n\r\n                    element.style.left = left + 'px';\r\n                    element.style.top = top + 'px';\r\n                    \r\n                    // allow custom `onmoved` method\r\n                    dispatchEvent('onmoved', this);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Resize the dialog to a specific width/height (the dialog must be 'resizable').\r\n             * The dialog can be resized to:\r\n             *  A minimum width equal to the initial display width\r\n             *  A minimum height equal to the sum of header/footer heights.\r\n             *\r\n             *\r\n             * @param {Number or String} width    The new dialog width in pixels or in percent.\r\n             * @param {Number or String} height   The new dialog height in pixels or in percent.\r\n             *\r\n             * @return {Object} The dialog instance.\r\n             */\r\n            resizeTo:function(width,height){\r\n                var w = parseFloat(width),\r\n                    h = parseFloat(height),\r\n                    regex = /(\\d*\\.\\d+|\\d+)%/\r\n                ;\r\n\r\n                if(!isNaN(w) && !isNaN(h) && this.get('resizable') === true){\r\n                    \r\n                    // allow custom `onresize` method\r\n                    dispatchEvent('onresize', this);\r\n                    \r\n                    if(('' + width).match(regex)){\r\n                        w = w / 100 * document.documentElement.clientWidth ;\r\n                    }\r\n\r\n                    if(('' + height).match(regex)){\r\n                        h = h / 100 * document.documentElement.clientHeight;\r\n                    }\r\n\r\n                    var element = this.elements.dialog;\r\n                    if (element.style.maxWidth !== 'none') {\r\n                        element.style.minWidth = (minWidth = element.offsetWidth) + 'px';\r\n                    }\r\n                    element.style.maxWidth = 'none';\r\n                    element.style.minHeight = this.elements.header.offsetHeight + this.elements.footer.offsetHeight + 'px';\r\n                    element.style.width = w + 'px';\r\n                    element.style.height = h + 'px';\r\n                    \r\n                    // allow custom `onresized` method\r\n                    dispatchEvent('onresized', this);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Gets or Sets dialog settings/options \r\n             *\r\n             * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.\r\n             * @param {Object} value Optional, the value associated with the key (in case it was a string).\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            setting : function (key, value) {\r\n                var self = this;\r\n                var result = update(this, this.__internal.options, function(k,o,n){ optionUpdated(self,k,o,n); }, key, value);\r\n                if(result.op === 'get'){\r\n                    if(result.found){\r\n                        return result.value;\r\n                    }else if(typeof this.settings !== 'undefined'){\r\n                        return update(this, this.settings, this.settingUpdated || function(){}, key, value).value;\r\n                    }else{\r\n                        return undefined;\r\n                    }\r\n                }else if(result.op === 'set'){\r\n                    if(result.items.length > 0){\r\n                        var callback = this.settingUpdated || function(){};\r\n                        for(var x=0;x<result.items.length;x+=1){\r\n                            var item = result.items[x];\r\n                            if(!item.found && typeof this.settings !== 'undefined'){\r\n                                update(this, this.settings, callback, item.key, item.value);\r\n                            }\r\n                        }\r\n                    }\r\n                    return this;\r\n                }\r\n            },\r\n            /**\r\n             * [Alias] Sets dialog settings/options \r\n             */\r\n            set:function(key, value){\r\n                this.setting(key,value);\r\n                return this;\r\n            },\r\n            /**\r\n             * [Alias] Gets dialog settings/options \r\n             */\r\n            get:function(key){\r\n                return this.setting(key);\r\n            },\r\n            /**\r\n            * Sets dialog header\r\n            * @content {string or element}\r\n            *\r\n            * @return {undefined}\r\n            */\r\n            setHeader:function(content){\r\n                if(isString(content)){\r\n                    clearContents(this.elements.header);\r\n                    this.elements.header.innerHTML = content;\r\n                }else if (content instanceof window.HTMLElement && this.elements.header.firstChild !== content){\r\n                    clearContents(this.elements.header);\r\n                    this.elements.header.appendChild(content);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n            * Sets dialog contents\r\n            * @content {string or element}\r\n            *\r\n            * @return {undefined}\r\n            */\r\n            setContent:function(content){\r\n                if(isString(content)){\r\n                    clearContents(this.elements.content);\r\n                    this.elements.content.innerHTML = content;\r\n                }else if (content instanceof window.HTMLElement && this.elements.content.firstChild !== content){\r\n                    clearContents(this.elements.content);\r\n                    this.elements.content.appendChild(content);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Show the dialog as modal\r\n             *\r\n             * @return {Object} the dialog instance.\r\n             */\r\n            showModal: function(className){\r\n                return this.show(true, className);\r\n            },\r\n            /**\r\n             * Show the dialog\r\n             *\r\n             * @return {Object} the dialog instance.\r\n             */\r\n            show: function (modal, className) {\r\n                \r\n                // ensure initialization\r\n                initialize(this);\r\n\r\n                if ( !this.__internal.isOpen ) {\r\n\r\n                    // add to open dialogs\r\n                    this.__internal.isOpen = true;\r\n                    openDialogs.push(this);\r\n\r\n                    // save last focused element\r\n                    if(alertify.defaults.maintainFocus){\r\n                        this.__internal.activeElement = document.activeElement;\r\n                    }\r\n\r\n                    // set tabindex attribute on body element this allows script to give it focusable\r\n                    if(!document.body.hasAttribute('tabindex')) {\r\n                        document.body.setAttribute( 'tabindex', tabindex = '0');\r\n                    }\r\n\r\n                    //allow custom dom manipulation updates before showing the dialog.\r\n                    if(typeof this.prepare === 'function'){\r\n                        this.prepare();\r\n                    }\r\n\r\n                    bindEvents(this);\r\n\r\n                    if(modal !== undefined){\r\n                        this.set('modal', modal);\r\n                    }\r\n\r\n                    //save scroll to prevent document jump\r\n                    saveScrollPosition();\r\n\r\n                    ensureNoOverflow();\r\n\r\n                    // allow custom dialog class on show\r\n                    if(typeof className === 'string' && className !== ''){\r\n                        this.__internal.className = className;\r\n                        addClass(this.elements.root, className);\r\n                    }\r\n\r\n                    // maximize if start maximized\r\n                    if ( this.get('startMaximized')) {\r\n                        this.maximize();\r\n                    }else if(this.isMaximized()){\r\n                        restore(this);\r\n                    }\r\n\r\n                    updateAbsPositionFix(this);\r\n                    this.elements.root.removeAttribute('style');\r\n                    removeClass(this.elements.root, classes.animationOut);\r\n                    addClass(this.elements.root, classes.animationIn);\r\n\r\n                    // set 1s fallback in case transition event doesn't fire\r\n                    clearTimeout( this.__internal.timerIn);\r\n                    this.__internal.timerIn = setTimeout( this.__internal.transitionInHandler, transition.supported ? 1000 : 100 );\r\n\r\n                    if(isSafari){\r\n                        // force desktop safari reflow\r\n                        var root = this.elements.root;\r\n                        root.style.display  = 'none';\r\n                        setTimeout(function(){root.style.display  = 'block';}, 0);\r\n                    }\r\n\r\n                    //reflow\r\n                    reflow = this.elements.root.offsetWidth;\r\n                  \r\n                    // show dialog\r\n                    removeClass(this.elements.root, classes.hidden);\r\n\r\n                    //restore scroll to prevent document jump\r\n                    restoreScrollPosition();\r\n\r\n                    // internal on show event\r\n                    if(typeof this.hooks.onshow === 'function'){\r\n                        this.hooks.onshow.call(this);\r\n                    }\r\n\r\n                    // allow custom `onshow` method\r\n                    dispatchEvent('onshow', this);\r\n\r\n                }else{\r\n                    // reset move updates\r\n                    resetMove(this);\r\n                    // reset resize updates\r\n                    resetResize(this);\r\n                    // shake the dialog to indicate its already open\r\n                    addClass(this.elements.dialog, classes.shake);\r\n                    var self = this;\r\n                    setTimeout(function(){\r\n                        removeClass(self.elements.dialog, classes.shake);\r\n                    },200);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Close the dialog\r\n             *\r\n             * @return {Object} The dialog instance\r\n             */\r\n            close: function () {\r\n                if (this.__internal.isOpen ) {\r\n                    // custom `onclosing` event\r\n                    if(dispatchEvent('onclosing', this) !== false){\r\n\r\n                        unbindEvents(this);\r\n\r\n                        removeClass(this.elements.root, classes.animationIn);\r\n                        addClass(this.elements.root, classes.animationOut);\r\n\r\n                        // set 1s fallback in case transition event doesn't fire\r\n                        clearTimeout( this.__internal.timerOut );\r\n                        this.__internal.timerOut = setTimeout( this.__internal.transitionOutHandler, transition.supported ? 1000 : 100 );\r\n                        // hide dialog\r\n                        addClass(this.elements.root, classes.hidden);\r\n                        //reflow\r\n                        reflow = this.elements.modal.offsetWidth;\r\n\r\n                        // return focus to the last active element\r\n                        if (alertify.defaults.maintainFocus && this.__internal.activeElement) {\r\n                            this.__internal.activeElement.focus();\r\n                            this.__internal.activeElement = null;\r\n                        }\r\n\r\n                        // remove custom dialog class on hide\r\n                        if (typeof this.__internal.className !== 'undefined' && this.__internal.className !== '') {\r\n                            removeClass(this.elements.root, this.__internal.className);\r\n                        }\r\n\r\n                        // internal on close event\r\n                        if(typeof this.hooks.onclose === 'function'){\r\n                            this.hooks.onclose.call(this);\r\n                        }\r\n\r\n                        // allow custom `onclose` method\r\n                        dispatchEvent('onclose', this);\r\n\r\n                        //remove from open dialogs\r\n                        openDialogs.splice(openDialogs.indexOf(this),1);\r\n                        this.__internal.isOpen = false;\r\n\r\n                        ensureNoOverflow();\r\n                    }\r\n\r\n                }\r\n                // last dialog and tab index was set by us, remove it.\r\n                if(!openDialogs.length && tabindex === '0'){\r\n                    document.body.removeAttribute('tabindex');\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Close all open dialogs except this.\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            closeOthers:function(){\r\n                alertify.closeAll(this);\r\n                return this;\r\n            },\r\n            /**\r\n             * Destroys this dialog instance\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            destroy:function(){\r\n                if(this.__internal) {\r\n                    if (this.__internal.isOpen ) {\r\n                        //mark dialog for destruction, this will be called on tranistionOut event.\r\n                        this.__internal.destroy = function(){\r\n                            destruct(this, initialize);\r\n                        };\r\n                        //close the dialog to unbind all events.\r\n                        this.close();\r\n                    }else if(!this.__internal.destroy){\r\n                        destruct(this, initialize);\r\n                    }\r\n                }\r\n                return this;\r\n            },\r\n        };\r\n\r\n\t} () );\r\n    var notifier = (function () {\r\n        var reflow,\r\n            element,\r\n            openInstances = [],\r\n            classes = defaults.notifier.classes,\r\n            baseClass = classes.base;\r\n        /**\r\n         * Helper: initializes the notifier instance\r\n         *\r\n         */\r\n        function initialize(instance) {\r\n\r\n            if (!instance.__internal) {\r\n                instance.__internal = {\r\n                    position: alertify.defaults.notifier.position,\r\n                    delay: alertify.defaults.notifier.delay,\r\n                };\r\n\r\n                element = document.createElement('DIV');\r\n                var transitionOff = 'transitionOff' in defaults.notifier ? defaults.notifier.transitionOff : defaults.transitionOff;\r\n                if(transitionOff){\r\n                    baseClass = classes.base + ' ajs-no-transition';\r\n                }\r\n                updatePosition(instance);\r\n            }\r\n\r\n            //add to DOM tree.\r\n            if (element.parentNode !== document.body) {\r\n                document.body.appendChild(element);\r\n            }\r\n        }\r\n\r\n        function pushInstance(instance) {\r\n            instance.__internal.pushed = true;\r\n            openInstances.push(instance);\r\n        }\r\n        function popInstance(instance) {\r\n            openInstances.splice(openInstances.indexOf(instance), 1);\r\n            instance.__internal.pushed = false;\r\n        }\r\n        /**\r\n         * Helper: update the notifier instance position\r\n         *\r\n         */\r\n        function updatePosition(instance) {\r\n            element.className = baseClass;\r\n            switch (instance.__internal.position) {\r\n            case 'top-right':\r\n                addClass(element, classes.top + ' ' + classes.right);\r\n                break;\r\n            case 'top-left':\r\n                addClass(element, classes.top + ' ' + classes.left);\r\n                break;\r\n            case 'top-center':\r\n                addClass(element, classes.top + ' ' + classes.center);\r\n                break;\r\n            case 'bottom-left':\r\n                addClass(element, classes.bottom + ' ' + classes.left);\r\n                break;\r\n            case 'bottom-center':\r\n                addClass(element, classes.bottom + ' ' + classes.center);\r\n                break;\r\n\r\n            default:\r\n            case 'bottom-right':\r\n                addClass(element, classes.bottom + ' ' + classes.right);\r\n                break;\r\n            }\r\n        }\r\n\r\n        /**\r\n        * creates a new notification message\r\n        *\r\n        * @param  {DOMElement} message\tThe notifier message element\r\n        * @param  {Number} wait   Time (in ms) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n        * @param  {Function} callback A callback function to be invoked when the message is dismissed.\r\n        *\r\n        * @return {undefined}\r\n        */\r\n        function create(div, callback) {\r\n\r\n            function clickDelegate(event, instance) {\r\n                if(!instance.__internal.closeButton || event.target.getAttribute('data-close') === 'true'){\r\n                    instance.dismiss(true);\r\n                }\r\n            }\r\n\r\n            function transitionDone(event, instance) {\r\n                // unbind event\r\n                off(instance.element, transition.type, transitionDone);\r\n                // remove the message\r\n                element.removeChild(instance.element);\r\n            }\r\n\r\n            function initialize(instance) {\r\n                if (!instance.__internal) {\r\n                    instance.__internal = {\r\n                        pushed: false,\r\n                        delay : undefined,\r\n                        timer: undefined,\r\n                        clickHandler: undefined,\r\n                        transitionEndHandler: undefined,\r\n                        transitionTimeout: undefined\r\n                    };\r\n                    instance.__internal.clickHandler = delegate(instance, clickDelegate);\r\n                    instance.__internal.transitionEndHandler = delegate(instance, transitionDone);\r\n                }\r\n                return instance;\r\n            }\r\n            function clearTimers(instance) {\r\n                clearTimeout(instance.__internal.timer);\r\n                clearTimeout(instance.__internal.transitionTimeout);\r\n            }\r\n            return initialize({\r\n                /* notification DOM element*/\r\n                element: div,\r\n                /*\r\n                 * Pushes a notification message\r\n                 * @param {string or DOMElement} content The notification message content\r\n                 * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n                 *\r\n                 */\r\n                push: function (_content, _wait) {\r\n                    if (!this.__internal.pushed) {\r\n\r\n                        pushInstance(this);\r\n                        clearTimers(this);\r\n\r\n                        var content, wait;\r\n                        switch (arguments.length) {\r\n                        case 0:\r\n                            wait = this.__internal.delay;\r\n                            break;\r\n                        case 1:\r\n                            if (typeof (_content) === 'number') {\r\n                                wait = _content;\r\n                            } else {\r\n                                content = _content;\r\n                                wait = this.__internal.delay;\r\n                            }\r\n                            break;\r\n                        case 2:\r\n                            content = _content;\r\n                            wait = _wait;\r\n                            break;\r\n                        }\r\n                        this.__internal.closeButton = alertify.defaults.notifier.closeButton;\r\n                        // set contents\r\n                        if (typeof content !== 'undefined') {\r\n                            this.setContent(content);\r\n                        }\r\n                        // append or insert\r\n                        if (notifier.__internal.position.indexOf('top') < 0) {\r\n                            element.appendChild(this.element);\r\n                        } else {\r\n                            element.insertBefore(this.element, element.firstChild);\r\n                        }\r\n                        reflow = this.element.offsetWidth;\r\n                        addClass(this.element, classes.visible);\r\n                        // attach click event\r\n                        on(this.element, 'click', this.__internal.clickHandler);\r\n                        return this.delay(wait);\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * {Function} callback function to be invoked before dismissing the notification message.\r\n                 * Remarks: A return value === 'false' will cancel the dismissal\r\n                 *\r\n                 */\r\n                ondismiss: function () { },\r\n                /*\r\n                 * {Function} callback function to be invoked when the message is dismissed.\r\n                 *\r\n                 */\r\n                callback: callback,\r\n                /*\r\n                 * Dismisses the notification message\r\n                 * @param {Boolean} clicked A flag indicating if the dismissal was caused by a click.\r\n                 *\r\n                 */\r\n                dismiss: function (clicked) {\r\n                    if (this.__internal.pushed) {\r\n                        clearTimers(this);\r\n                        if (!(typeof this.ondismiss === 'function' && this.ondismiss.call(this) === false)) {\r\n                            //detach click event\r\n                            off(this.element, 'click', this.__internal.clickHandler);\r\n                            // ensure element exists\r\n                            if (typeof this.element !== 'undefined' && this.element.parentNode === element) {\r\n                                //transition end or fallback\r\n                                this.__internal.transitionTimeout = setTimeout(this.__internal.transitionEndHandler, transition.supported ? 1000 : 100);\r\n                                removeClass(this.element, classes.visible);\r\n\r\n                                // custom callback on dismiss\r\n                                if (typeof this.callback === 'function') {\r\n                                    this.callback.call(this, clicked);\r\n                                }\r\n                            }\r\n                            popInstance(this);\r\n                        }\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * Delays the notification message dismissal\r\n                 * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n                 *\r\n                 */\r\n                delay: function (wait) {\r\n                    clearTimers(this);\r\n                    this.__internal.delay = typeof wait !== 'undefined' && !isNaN(+wait) ? +wait : notifier.__internal.delay;\r\n                    if (this.__internal.delay > 0) {\r\n                        var  self = this;\r\n                        this.__internal.timer = setTimeout(function () { self.dismiss(); }, this.__internal.delay * 1000);\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * Sets the notification message contents\r\n                 * @param {string or DOMElement} content The notification message content\r\n                 *\r\n                 */\r\n                setContent: function (content) {\r\n                    if (isString(content)) {\r\n                        clearContents(this.element);\r\n                        this.element.innerHTML = content;\r\n                    } else if (content instanceof window.HTMLElement && this.element.firstChild !== content) {\r\n                        clearContents(this.element);\r\n                        this.element.appendChild(content);\r\n                    }\r\n                    if(this.__internal.closeButton){\r\n                        var close = document.createElement('span');\r\n                        addClass(close, classes.close);\r\n                        close.setAttribute('data-close', true);\r\n                        this.element.appendChild(close);\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * Dismisses all open notifications except this.\r\n                 *\r\n                 */\r\n                dismissOthers: function () {\r\n                    notifier.dismissAll(this);\r\n                    return this;\r\n                }\r\n            });\r\n        }\r\n\r\n        //notifier api\r\n        return {\r\n            /**\r\n             * Gets or Sets notifier settings.\r\n             *\r\n             * @param {string} key The setting name\r\n             * @param {Variant} value The setting value.\r\n             *\r\n             * @return {Object}\tif the called as a setter, return the notifier instance.\r\n             */\r\n            setting: function (key, value) {\r\n                //ensure init\r\n                initialize(this);\r\n\r\n                if (typeof value === 'undefined') {\r\n                    //get\r\n                    return this.__internal[key];\r\n                } else {\r\n                    //set\r\n                    switch (key) {\r\n                    case 'position':\r\n                        this.__internal.position = value;\r\n                        updatePosition(this);\r\n                        break;\r\n                    case 'delay':\r\n                        this.__internal.delay = value;\r\n                        break;\r\n                    }\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * [Alias] Sets dialog settings/options\r\n             */\r\n            set:function(key,value){\r\n                this.setting(key,value);\r\n                return this;\r\n            },\r\n            /**\r\n             * [Alias] Gets dialog settings/options\r\n             */\r\n            get:function(key){\r\n                return this.setting(key);\r\n            },\r\n            /**\r\n             * Creates a new notification message\r\n             *\r\n             * @param {string} type The type of notification message (simply a CSS class name 'ajs-{type}' to be added).\r\n             * @param {Function} callback  A callback function to be invoked when the message is dismissed.\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            create: function (type, callback) {\r\n                //ensure notifier init\r\n                initialize(this);\r\n                //create new notification message\r\n                var div = document.createElement('div');\r\n                div.className = classes.message + ((typeof type === 'string' && type !== '') ? ' ' + classes.prefix + type : '');\r\n                return create(div, callback);\r\n            },\r\n            /**\r\n             * Dismisses all open notifications.\r\n             *\r\n             * @param {Object} excpet [optional] The notification object to exclude from dismissal.\r\n             *\r\n             */\r\n            dismissAll: function (except) {\r\n                var clone = openInstances.slice(0);\r\n                for (var x = 0; x < clone.length; x += 1) {\r\n                    var  instance = clone[x];\r\n                    if (except === undefined || except !== instance) {\r\n                        instance.dismiss();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    })();\r\n\r\n    /**\r\n     * Alertify public API\r\n     * This contains everything that is exposed through the alertify object.\r\n     *\r\n     * @return {Object}\r\n     */\r\n    function Alertify() {\r\n\r\n        // holds a references of created dialogs\r\n        var dialogs = {};\r\n\r\n        /**\r\n         * Extends a given prototype by merging properties from base into sub.\r\n         *\r\n         * @sub {Object} sub The prototype being overwritten.\r\n         * @base {Object} base The prototype being written.\r\n         *\r\n         * @return {Object} The extended prototype.\r\n         */\r\n        function extend(sub, base) {\r\n            // copy dialog pototype over definition.\r\n            for (var prop in base) {\r\n                if (base.hasOwnProperty(prop)) {\r\n                    sub[prop] = base[prop];\r\n                }\r\n            }\r\n            return sub;\r\n        }\r\n\r\n\r\n        /**\r\n        * Helper: returns a dialog instance from saved dialogs.\r\n        * and initializes the dialog if its not already initialized.\r\n        *\r\n        * @name {String} name The dialog name.\r\n        *\r\n        * @return {Object} The dialog instance.\r\n        */\r\n        function get_dialog(name) {\r\n            var dialog = dialogs[name].dialog;\r\n            //initialize the dialog if its not already initialized.\r\n            if (dialog && typeof dialog.__init === 'function') {\r\n                dialog.__init(dialog);\r\n            }\r\n            return dialog;\r\n        }\r\n\r\n        /**\r\n         * Helper:  registers a new dialog definition.\r\n         *\r\n         * @name {String} name The dialog name.\r\n         * @Factory {Function} Factory a function resposible for creating dialog prototype.\r\n         * @transient {Boolean} transient True to create a new dialog instance each time the dialog is invoked, false otherwise.\r\n         * @base {String} base the name of another dialog to inherit from.\r\n         *\r\n         * @return {Object} The dialog definition.\r\n         */\r\n        function register(name, Factory, transient, base) {\r\n            var definition = {\r\n                dialog: null,\r\n                factory: Factory\r\n            };\r\n\r\n            //if this is based on an existing dialog, create a new definition\r\n            //by applying the new protoype over the existing one.\r\n            if (base !== undefined) {\r\n                definition.factory = function () {\r\n                    return extend(new dialogs[base].factory(), new Factory());\r\n                };\r\n            }\r\n\r\n            if (!transient) {\r\n                //create a new definition based on dialog\r\n                definition.dialog = extend(new definition.factory(), dialog);\r\n            }\r\n            return dialogs[name] = definition;\r\n        }\r\n\r\n        return {\r\n            /**\r\n             * Alertify defaults\r\n             * \r\n             * @type {Object}\r\n             */\r\n            defaults: defaults,\r\n            /**\r\n             * Dialogs factory \r\n             *\r\n             * @param {string}      Dialog name.\r\n             * @param {Function}    A Dialog factory function.\r\n             * @param {Boolean}     Indicates whether to create a singleton or transient dialog.\r\n             * @param {String}      The name of the base type to inherit from.\r\n             */\r\n            dialog: function (name, Factory, transient, base) {\r\n\r\n                // get request, create a new instance and return it.\r\n                if (typeof Factory !== 'function') {\r\n                    return get_dialog(name);\r\n                }\r\n\r\n                if (this.hasOwnProperty(name)) {\r\n                    throw new Error('alertify.dialog: name already exists');\r\n                }\r\n\r\n                // register the dialog\r\n                var definition = register(name, Factory, transient, base);\r\n\r\n                if (transient) {\r\n\r\n                    // make it public\r\n                    this[name] = function () {\r\n                        //if passed with no params, consider it a get request\r\n                        if (arguments.length === 0) {\r\n                            return definition.dialog;\r\n                        } else {\r\n                            var instance = extend(new definition.factory(), dialog);\r\n                            //ensure init\r\n                            if (instance && typeof instance.__init === 'function') {\r\n                                instance.__init(instance);\r\n                            }\r\n                            instance['main'].apply(instance, arguments);\r\n                            return instance['show'].apply(instance);\r\n                        }\r\n                    };\r\n                } else {\r\n                    // make it public\r\n                    this[name] = function () {\r\n                        //ensure init\r\n                        if (definition.dialog && typeof definition.dialog.__init === 'function') {\r\n                            definition.dialog.__init(definition.dialog);\r\n                        }\r\n                        //if passed with no params, consider it a get request\r\n                        if (arguments.length === 0) {\r\n                            return definition.dialog;\r\n                        } else {\r\n                            var dialog = definition.dialog;\r\n                            dialog['main'].apply(definition.dialog, arguments);\r\n                            return dialog['show'].apply(definition.dialog);\r\n                        }\r\n                    };\r\n                }\r\n            },\r\n            /**\r\n             * Close all open dialogs.\r\n             *\r\n             * @param {Object} excpet [optional] The dialog object to exclude from closing.\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            closeAll: function (except) {\r\n                var clone = openDialogs.slice(0);\r\n                for (var x = 0; x < clone.length; x += 1) {\r\n                    var instance = clone[x];\r\n                    if (except === undefined || except !== instance) {\r\n                        instance.close();\r\n                    }\r\n                }\r\n            },\r\n            /**\r\n             * Gets or Sets dialog settings/options. if the dialog is transient, this call does nothing.\r\n             *\r\n             * @param {string} name The dialog name.\r\n             * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.\r\n             * @param {Variant} value Optional, the value associated with the key (in case it was a string).\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            setting: function (name, key, value) {\r\n\r\n                if (name === 'notifier') {\r\n                    return notifier.setting(key, value);\r\n                }\r\n\r\n                var dialog = get_dialog(name);\r\n                if (dialog) {\r\n                    return dialog.setting(key, value);\r\n                }\r\n            },\r\n            /**\r\n             * [Alias] Sets dialog settings/options \r\n             */\r\n            set: function(name,key,value){\r\n                return this.setting(name, key,value);\r\n            },\r\n            /**\r\n             * [Alias] Gets dialog settings/options \r\n             */\r\n            get: function(name, key){\r\n                return this.setting(name, key);\r\n            },\r\n            /**\r\n             * Creates a new notification message.\r\n             * If a type is passed, a class name \"ajs-{type}\" will be added.\r\n             * This allows for custom look and feel for various types of notifications.\r\n             *\r\n             * @param  {String | DOMElement}    [message=undefined]\t\tMessage text\r\n             * @param  {String}                 [type='']\t\t\t\tType of log message\r\n             * @param  {String}                 [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}               [callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            notify: function (message, type, wait, callback) {\r\n                return notifier.create(type, callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            message: function (message, wait, callback) {\r\n                return notifier.create(null, callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message of type 'success'.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            success: function (message, wait, callback) {\r\n                return notifier.create('success', callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message of type 'error'.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            error: function (message, wait, callback) {\r\n                return notifier.create('error', callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message of type 'warning'.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            warning: function (message, wait, callback) {\r\n                return notifier.create('warning', callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Dismisses all open notifications\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            dismissAll: function () {\r\n                notifier.dismissAll();\r\n            }\r\n        };\r\n    }\r\n    var alertify = new Alertify();\r\n\r\n    /**\r\n    * Alert dialog definition\r\n    *\r\n    * invoked by:\r\n    *\talertify.alert(message);\r\n    *\talertify.alert(title, message);\r\n    *\talertify.alert(message, onok);\r\n    *\talertify.alert(title, message, onok);\r\n     */\r\n    alertify.dialog('alert', function () {\r\n        return {\r\n            main: function (_title, _message, _onok) {\r\n                var title, message, onok;\r\n                switch (arguments.length) {\r\n                case 1:\r\n                    message = _title;\r\n                    break;\r\n                case 2:\r\n                    if (typeof _message === 'function') {\r\n                        message = _title;\r\n                        onok = _message;\r\n                    } else {\r\n                        title = _title;\r\n                        message = _message;\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    title = _title;\r\n                    message = _message;\r\n                    onok = _onok;\r\n                    break;\r\n                }\r\n                this.set('title', title);\r\n                this.set('message', message);\r\n                this.set('onok', onok);\r\n                return this;\r\n            },\r\n            setup: function () {\r\n                return {\r\n                    buttons: [\r\n                        {\r\n                            text: alertify.defaults.glossary.ok,\r\n                            key: keys.ESC,\r\n                            invokeOnClose: true,\r\n                            className: alertify.defaults.theme.ok,\r\n                        }\r\n                    ],\r\n                    focus: {\r\n                        element: 0,\r\n                        select: false\r\n                    },\r\n                    options: {\r\n                        maximizable: false,\r\n                        resizable: false\r\n                    }\r\n                };\r\n            },\r\n            build: function () {\r\n                // nothing\r\n            },\r\n            prepare: function () {\r\n                //nothing\r\n            },\r\n            setMessage: function (message) {\r\n                this.setContent(message);\r\n            },\r\n            settings: {\r\n                message: undefined,\r\n                onok: undefined,\r\n                label: undefined,\r\n            },\r\n            settingUpdated: function (key, oldValue, newValue) {\r\n                switch (key) {\r\n                case 'message':\r\n                    this.setMessage(newValue);\r\n                    break;\r\n                case 'label':\r\n                    if (this.__internal.buttons[0].element) {\r\n                        this.__internal.buttons[0].element.innerHTML = newValue;\r\n                    }\r\n                    break;\r\n                }\r\n            },\r\n            callback: function (closeEvent) {\r\n                if (typeof this.get('onok') === 'function') {\r\n                    var returnValue = this.get('onok').call(this, closeEvent);\r\n                    if (typeof returnValue !== 'undefined') {\r\n                        closeEvent.cancel = !returnValue;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    });\r\n    /**\r\n     * Confirm dialog object\r\n     *\r\n     *\talertify.confirm(message);\r\n     *\talertify.confirm(message, onok);\r\n     *\talertify.confirm(message, onok, oncancel);\r\n     *\talertify.confirm(title, message, onok, oncancel);\r\n     */\r\n    alertify.dialog('confirm', function () {\r\n\r\n        var autoConfirm = {\r\n            timer: null,\r\n            index: null,\r\n            text: null,\r\n            duration: null,\r\n            task: function (event, self) {\r\n                if (self.isOpen()) {\r\n                    self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text + ' (&#8207;' + autoConfirm.duration + '&#8207;) ';\r\n                    autoConfirm.duration -= 1;\r\n                    if (autoConfirm.duration === -1) {\r\n                        clearAutoConfirm(self);\r\n                        var button = self.__internal.buttons[autoConfirm.index];\r\n                        var closeEvent = createCloseEvent(autoConfirm.index, button);\r\n\r\n                        if (typeof self.callback === 'function') {\r\n                            self.callback.apply(self, [closeEvent]);\r\n                        }\r\n                        //close the dialog.\r\n                        if (closeEvent.close !== false) {\r\n                            self.close();\r\n                        }\r\n                    }\r\n                } else {\r\n                    clearAutoConfirm(self);\r\n                }\r\n            }\r\n        };\r\n\r\n        function clearAutoConfirm(self) {\r\n            if (autoConfirm.timer !== null) {\r\n                clearInterval(autoConfirm.timer);\r\n                autoConfirm.timer = null;\r\n                self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text;\r\n            }\r\n        }\r\n\r\n        function startAutoConfirm(self, index, duration) {\r\n            clearAutoConfirm(self);\r\n            autoConfirm.duration = duration;\r\n            autoConfirm.index = index;\r\n            autoConfirm.text = self.__internal.buttons[index].element.innerHTML;\r\n            autoConfirm.timer = setInterval(delegate(self, autoConfirm.task), 1000);\r\n            autoConfirm.task(null, self);\r\n        }\r\n\r\n\r\n        return {\r\n            main: function (_title, _message, _onok, _oncancel) {\r\n                var title, message, onok, oncancel;\r\n                switch (arguments.length) {\r\n                case 1:\r\n                    message = _title;\r\n                    break;\r\n                case 2:\r\n                    message = _title;\r\n                    onok = _message;\r\n                    break;\r\n                case 3:\r\n                    message = _title;\r\n                    onok = _message;\r\n                    oncancel = _onok;\r\n                    break;\r\n                case 4:\r\n                    title = _title;\r\n                    message = _message;\r\n                    onok = _onok;\r\n                    oncancel = _oncancel;\r\n                    break;\r\n                }\r\n                this.set('title', title);\r\n                this.set('message', message);\r\n                this.set('onok', onok);\r\n                this.set('oncancel', oncancel);\r\n                return this;\r\n            },\r\n            setup: function () {\r\n                return {\r\n                    buttons: [\r\n                        {\r\n                            text: alertify.defaults.glossary.ok,\r\n                            key: keys.ENTER,\r\n                            className: alertify.defaults.theme.ok,\r\n                        },\r\n                        {\r\n                            text: alertify.defaults.glossary.cancel,\r\n                            key: keys.ESC,\r\n                            invokeOnClose: true,\r\n                            className: alertify.defaults.theme.cancel,\r\n                        }\r\n                    ],\r\n                    focus: {\r\n                        element: 0,\r\n                        select: false\r\n                    },\r\n                    options: {\r\n                        maximizable: false,\r\n                        resizable: false\r\n                    }\r\n                };\r\n            },\r\n            build: function () {\r\n                //nothing\r\n            },\r\n            prepare: function () {\r\n                //nothing\r\n            },\r\n            setMessage: function (message) {\r\n                this.setContent(message);\r\n            },\r\n            settings: {\r\n                message: null,\r\n                labels: null,\r\n                onok: null,\r\n                oncancel: null,\r\n                defaultFocus: null,\r\n                reverseButtons: null,\r\n            },\r\n            settingUpdated: function (key, oldValue, newValue) {\r\n                switch (key) {\r\n                case 'message':\r\n                    this.setMessage(newValue);\r\n                    break;\r\n                case 'labels':\r\n                    if ('ok' in newValue && this.__internal.buttons[0].element) {\r\n                        this.__internal.buttons[0].text = newValue.ok;\r\n                        this.__internal.buttons[0].element.innerHTML = newValue.ok;\r\n                    }\r\n                    if ('cancel' in newValue && this.__internal.buttons[1].element) {\r\n                        this.__internal.buttons[1].text = newValue.cancel;\r\n                        this.__internal.buttons[1].element.innerHTML = newValue.cancel;\r\n                    }\r\n                    break;\r\n                case 'reverseButtons':\r\n                    if (newValue === true) {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);\r\n                    } else {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);\r\n                    }\r\n                    break;\r\n                case 'defaultFocus':\r\n                    this.__internal.focus.element = newValue === 'ok' ? 0 : 1;\r\n                    break;\r\n                }\r\n            },\r\n            callback: function (closeEvent) {\r\n                clearAutoConfirm(this);\r\n                var returnValue;\r\n                switch (closeEvent.index) {\r\n                case 0:\r\n                    if (typeof this.get('onok') === 'function') {\r\n                        returnValue = this.get('onok').call(this, closeEvent);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    if (typeof this.get('oncancel') === 'function') {\r\n                        returnValue = this.get('oncancel').call(this, closeEvent);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            },\r\n            autoOk: function (duration) {\r\n                startAutoConfirm(this, 0, duration);\r\n                return this;\r\n            },\r\n            autoCancel: function (duration) {\r\n                startAutoConfirm(this, 1, duration);\r\n                return this;\r\n            }\r\n        };\r\n    });\r\n    /**\r\n     * Prompt dialog object\r\n     *\r\n     * invoked by:\r\n     *\talertify.prompt(message);\r\n     *\talertify.prompt(message, value);\r\n     *\talertify.prompt(message, value, onok);\r\n     *\talertify.prompt(message, value, onok, oncancel);\r\n     *\talertify.prompt(title, message, value, onok, oncancel);\r\n     */\r\n    alertify.dialog('prompt', function () {\r\n        var input = document.createElement('INPUT');\r\n        var p = document.createElement('P');\r\n        return {\r\n            main: function (_title, _message, _value, _onok, _oncancel) {\r\n                var title, message, value, onok, oncancel;\r\n                switch (arguments.length) {\r\n                case 1:\r\n                    message = _title;\r\n                    break;\r\n                case 2:\r\n                    message = _title;\r\n                    value = _message;\r\n                    break;\r\n                case 3:\r\n                    message = _title;\r\n                    value = _message;\r\n                    onok = _value;\r\n                    break;\r\n                case 4:\r\n                    message = _title;\r\n                    value = _message;\r\n                    onok = _value;\r\n                    oncancel = _onok;\r\n                    break;\r\n                case 5:\r\n                    title = _title;\r\n                    message = _message;\r\n                    value = _value;\r\n                    onok = _onok;\r\n                    oncancel = _oncancel;\r\n                    break;\r\n                }\r\n                this.set('title', title);\r\n                this.set('message', message);\r\n                this.set('value', value);\r\n                this.set('onok', onok);\r\n                this.set('oncancel', oncancel);\r\n                return this;\r\n            },\r\n            setup: function () {\r\n                return {\r\n                    buttons: [\r\n                        {\r\n                            text: alertify.defaults.glossary.ok,\r\n                            key: keys.ENTER,\r\n                            className: alertify.defaults.theme.ok,\r\n                        },\r\n                        {\r\n                            text: alertify.defaults.glossary.cancel,\r\n                            key: keys.ESC,\r\n                            invokeOnClose: true,\r\n                            className: alertify.defaults.theme.cancel,\r\n                        }\r\n                    ],\r\n                    focus: {\r\n                        element: input,\r\n                        select: true\r\n                    },\r\n                    options: {\r\n                        maximizable: false,\r\n                        resizable: false\r\n                    }\r\n                };\r\n            },\r\n            build: function () {\r\n                input.className = alertify.defaults.theme.input;\r\n                input.setAttribute('type', 'text');\r\n                input.value = this.get('value');\r\n                this.elements.content.appendChild(p);\r\n                this.elements.content.appendChild(input);\r\n            },\r\n            prepare: function () {\r\n                //nothing\r\n            },\r\n            setMessage: function (message) {\r\n                if (isString(message)) {\r\n                    clearContents(p);\r\n                    p.innerHTML = message;\r\n                } else if (message instanceof window.HTMLElement && p.firstChild !== message) {\r\n                    clearContents(p);\r\n                    p.appendChild(message);\r\n                }\r\n            },\r\n            settings: {\r\n                message: undefined,\r\n                labels: undefined,\r\n                onok: undefined,\r\n                oncancel: undefined,\r\n                value: '',\r\n                type:'text',\r\n                reverseButtons: undefined,\r\n            },\r\n            settingUpdated: function (key, oldValue, newValue) {\r\n                switch (key) {\r\n                case 'message':\r\n                    this.setMessage(newValue);\r\n                    break;\r\n                case 'value':\r\n                    input.value = newValue;\r\n                    break;\r\n                case 'type':\r\n                    switch (newValue) {\r\n                    case 'text':\r\n                    case 'color':\r\n                    case 'date':\r\n                    case 'datetime-local':\r\n                    case 'email':\r\n                    case 'month':\r\n                    case 'number':\r\n                    case 'password':\r\n                    case 'search':\r\n                    case 'tel':\r\n                    case 'time':\r\n                    case 'week':\r\n                        input.type = newValue;\r\n                        break;\r\n                    default:\r\n                        input.type = 'text';\r\n                        break;\r\n                    }\r\n                    break;\r\n                case 'labels':\r\n                    if (newValue.ok && this.__internal.buttons[0].element) {\r\n                        this.__internal.buttons[0].element.innerHTML = newValue.ok;\r\n                    }\r\n                    if (newValue.cancel && this.__internal.buttons[1].element) {\r\n                        this.__internal.buttons[1].element.innerHTML = newValue.cancel;\r\n                    }\r\n                    break;\r\n                case 'reverseButtons':\r\n                    if (newValue === true) {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);\r\n                    } else {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);\r\n                    }\r\n                    break;\r\n                }\r\n            },\r\n            callback: function (closeEvent) {\r\n                var returnValue;\r\n                switch (closeEvent.index) {\r\n                case 0:\r\n                    this.settings.value = input.value;\r\n                    if (typeof this.get('onok') === 'function') {\r\n                        returnValue = this.get('onok').call(this, closeEvent, this.settings.value);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    if (typeof this.get('oncancel') === 'function') {\r\n                        returnValue = this.get('oncancel').call(this, closeEvent);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    if(!closeEvent.cancel){\r\n                        input.value = this.settings.value;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n    });\r\n\r\n    // CommonJS\r\n    if ( typeof module === 'object' && typeof module.exports === 'object' ) {\r\n        module.exports = alertify;\r\n    // AMD\r\n    } else if ( typeof define === 'function' && define.amd) {\r\n        define( [], function () {\r\n            return alertify;\r\n        } );\r\n    // window\r\n    } else if ( !window.alertify ) {\r\n        window.alertify = alertify;\r\n    }\r\n\r\n} ( typeof window !== 'undefined' ? window : this ) );\r\n"],"sourceRoot":""}